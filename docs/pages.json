[{"path":"/getstarted/quickstart/cluster-setup","date":"2017-03-03T11:40:25-08:00","title":"Setup Maglev Development Cluster","menu":"menu:","  main":" main:","    parent":"   parent: \"getstarted-quickstart\"","    weight":"   weight: 1","content":"\n\nMaglev provides a development cluster provisioned in our lab environment. This cluster consists of all Maglev components and services.\n\nCreating a cluster using Tesseract DevCloud\n\nBug Bhavik (bhavipa2) to add you as a user on DevCloud\nOnce you have access, login to http://dev-tesseract.cisco.com/\nFollow the onscreen wizard to create a cluster. At the time of creation, choose the right appstack (maglev or ndp etc.,). Choose the required build (latest is better)\nYou will receive an email when your cluster has been created, with access details.\n\n Note: Unification Branch, ISO is not yet released ","id":0},{"path":"/getstarted/quickstart/developer-guide","date":"2017-03-03T11:40:25-08:00","title":"Getting Started","aliases":"aliases:","menu":"menu:","  main":" main:","    parent":"   parent: \"getstarted-quickstart\"","    weight":"   weight: 2","content":"\nGetting started with DNAC plugin development\n\nFollow these steps to create and run your first plugin:\n Cluster based Development\n\nDeploy a cluster via http://dev-tesseract.cisco.com/\n\nInstall Tooling (DPM)\n     npm -g install @cisco-dna/dpm --registry http://engci-maven-master.cisco.com/artifactory/api/npm/apic-em-npm-group/\n\nCreate and start a dev server for your plugin:\n     dpm create myPlugin && cd myPlugin && dpm start -s\n\nVisit https://localhost:3002 and accept the security warning.\n\n    \nPoint your cluster to your local dev server:\n    Visit https://cluster-ip/developer\n    Add https://localhost:3002/ui-config.json as a dev config url\n\n    \nVisit https://cluster-ip/myPlugin.  You should see stuff.\n\nPlatform based Development\n\nInstall Tooling (DPM)\n\n     npm -g install @cisco-dna/dpm --registry http://engci-maven-master.cisco.com/artifactory/api/npm/apic-em-npm-group/\n\nCreate and start a dev server for your plugin:\n\n     dpm create myPlugin && cd myPlugin && dpm start\n\nClone the platformui repository at https://sjc-apl-grt28.cisco.com:8081//admin/projects/platformui.\n\nStart a local platform instance:\n\n     cd ui && dev-env-setup && dev-start\n\nVisit http://localhost:3001/developer\n\nAdd http://localhost:3002/ui-config.json as a dev config url\n\nhttp://localhost:3001/myPlugin. You should see a welcome message!\n\nPlugin Manifest (ui-config.js)\n\nThis file, generated as part of your plugin's boilerplate, describes your plugin and how it extends the platform.  It looks something like this:\nmodule.exports = ( ) =   : { \n  return  ,\n      modulePreload,\n      contributions:  \n        ]\n       \n     \n   \n \n Contributions\nGenerally, platform extensions are defined via contributions.  Plugins can also make themselves extensible in arbitrary ways via extensionPoints.  More detail on this can be found here.\n\nOften, extensionPoints require contributions to point to some Javascript module that implements a particular interface, the details of which depend on the extensionPoint. The assetRef function is a way to reference such modules.  At build time, DPM outputs a ui-config.json with assetRefs replaced with final hashed module names.  More on that here.\n\nNotice that a route contribution is specified.  When the /myPlugin path is visited in the browser, the view defined in the plugin's Plugin.js module will render.  Here's what Plugin.js looks like:\n\nimport styles from \"./Plugin.scss\"\n\nconst createView = () =  )  ,\n    dispose() { \n   \n \n\nexport default createView\n\nTry changing this code while your dev server is running.  When you save, the browser will refresh automatically.  You can also change css (the Plugin.scss file) and the page will auto update.\n\nRendering UI\n\n Platform Shell\n\nThe platform shell provides extension points for assigning views to specific url routes.\n\nUsing a view framework\n\nThe platform doesn't care how your plugin renders views, so long as it can return a DOM node when asked.  More discussion on this here.\n\nMost view frameworks can be used.  For React users, a utility library is provided to easily adapt React components to platform generic views.\n\n Bootstrap CSS\n\nBootstrap CSS class names can be used in DOM markup.  The DNAC platform's pre-loads a customized Bootstrap theme that conforms to DNAC cohesion styling.  The DNA Bootstrap guide can be found here.\n\nPlatform Web Components\n\nThe DNA UI platform is pre-packaged with a number of Web Components that can be leveraged to take advantage of common functionality and look and feel.  These are exposed as custom html tags, so they can generally be used via any view rendering framework.\n\n Custom URL routing\n\nShell Service\nThe shell provides APIs for obtaining/manipulating the current route and query parameters, and checking whether or not a route matches a given pattern.  These APIs can be used to conditionally render views, and change the current route based on user actions.\n\n Routing libraries\nGenerally, routing libraries such as react-router can be used by plugins to manage their own routes, the caveat being that they'll generally be unaware of route changes that happen outside of their control, without you adding some extra logic.\n\n","id":1},{"path":"/getstarted/quickstart/developer-guide","date":"2017-03-03T11:40:25-08:00","title":"DNA UI plugin developer guide","menu":"menu:","  main":" main:","    parent":"   parent: \"getstarted-quickstart\"","    weight":"   weight: 2","content":"\nDNA UI plugin developer guide\n\n Getting Started\n\n Unification Branch  ISO is not yet released . So,  skip the step 1.\n\nDeploy a cluster via http://dev-tesseract.cisco.com/\n\nInstall Tooling (DPM)\n     npm -g install @cisco-dna/dpm --registry http://engci-maven-master.cisco.com/artifactory/api/npm/apic-em-npm-group/\n\nCreate and start a dev server for your plugin:\n     dpm create myPlugin && cd myPlugin && dpm start\n\nVisit http://localhost:3002 and accept the security warning.\n\n\tNote: Unification Branch, ISO is not yet released. So, Follow the Unification Branch section  and skip the 5 and 6 of this section. \n    \n    \nPoint your cluster to your local dev server:\n    Visit http://cluster-ip/developer\n    Add http://localhost:3002/ui-config.json as a dev config url\n    \n\nVisit https://cluster-ip/myPlugin.  You should see stuff.\n\nUnification Branch\n\nCurrently active development going on Unification branch of platform-ui and ISO build of this branch is not yet released\n\nSo,  for the UI plugin development , follow the below steps to proceed still ISO released.\n\nStep 1 : \n\nClone the Repo - https://sjc-apl-grt28.cisco.com:8081//admin/projects/platform_ui\n \nStep 2 : git checkout unification\n\nStep 3 : run the ./dev-env-setup & ./dev-start\n\nStep 4 : http://localhost:3001/developer\n\nStep 5 : Add http://localhost:3002/ui-config.json as a dev config url\n\nStep 6 : http://localhost:3001/myPlugin . You should see stuff.\n\nPlugin manifest (ui-config.js)\n\nThis file, generated as part of your plugin's boilerplate, describes your plugin and how it extends the platform.  It looks something like this:\nmodule.exports = ( ) =   : { \n  return  ,\n      modulePreload,\n      contributions:  \n        ]\n       \n     \n   \n \n\nGenerally, platform extensions are defined via contributions.  Plugins can also make themselves extensible in arbitrary ways via extensionPoints.  More detail on this can be found here.\n\nContributions often must point to some module that implements a particular interface, the details of which depend on the extensionPoint.  assetRef is a way to reference such modules.  At build time, DPM outputs a ui-config.json with assetRefs replaced with final hashed module names.  More on that here.\n\n NOTE: currently it is planned to extract the assetRef capability into a standalone webpack plugin, for those who want to roll their own webpack builds.\n\nNotice that a route contribution is specified.  When the /myPlugin path is visited in the browser, the view defined in the plugin's Plugin.js module will render.  Here's what Plugin.js looks like:\n\nimport styles from \"./Plugin.scss\"\n\nconst createView = () =  )  ,\n    dispose() { \n   \n \n\nexport default createView\n\nTry changing this code while your dev server is running.  When you save, the browser will refresh automatically.  You can also change css (the Plugin.scss file) and the page will auto update.\n\n Views\n\nUsing a view framework\n\nThe platform doesn't care how your plugin renders views, so long as it can hand the platform a DOM node when asked.  More discussion on this here.\n\nMost view frameworks can be used.  For React users, a utility library is provided to easily adapt React components to platform generic views.\n\n Bootstrap CSS\n\nPlatform Web Components\n\nThe DNA UI platform will be packaged with a number of web components that can be leveraged to take advantage of common functionality and look and feel.  These are exposed as custom html tags, so they can generally be used anywhere.\n\nGo to Web Components\n\n Custom routing\n\nGenerally, routing libraries such as react-router can be used by plugins to manage their own routes.\n\n","id":2},{"path":"/getstarted/quickstart/dpm","date":"2017-03-03T11:40:25-08:00","title":"Setup DPM","menu":"menu:","  main":" main:","    parent":"   parent: \"getstarted-quickstart\"","    weight":"   weight: 3","content":"\n\nExplanation of DPM goes here\n\nPrerequisites\n\nHave your own Maglev cluster setup, using Maglev Dev Cluster.\n\n Setup DPM\n\nInstall Tooling (DPM)\n     npm -g install @cisco-dna/dpm --registry http://engci-maven-master.cisco.com/artifactory/api/npm/apic-em-npm-group/\n\nCreate and start a dev server for your plugin:\n     dpm create myPlugin && cd myPlugin && dpm start -s\n\nVisit https://localhost:3002 and accept the security warning.\n\nPoint your cluster to your local dev server:\n    Visit https://cluster-ip/developer\n    Add https://localhost:3002/ui-config.json as a dev config url\n\nVisit https://cluster-ip/myPlugin.  You should see stuff.\n","id":3},{"path":"/guides/assetrefplugin/AssetRefPlugin","date":"2017-03-03T11:40:25-08:00","title":"AssetRef Plugin","menu":"menu:","  main":" main:","    parent":"   parent: \"assetrefplugin\"","    weight":"   weight: 6","content":"\nAssetRef Plugin\n\nWebpack Plugin to convert ui-confg.js to ui-config.json with module path entry.\n\n Install\n\nIn your UI plugin project:\n \n \n set registry=\"http://engci-maven-master.cisco.com/artifactory/api/npm/apic-em-npm-group/\"\n \n\tnpm install @cisco-dna/asset-ref-plugin\n\nWhy Is This Useful?\n\nWhen working with DNA UI Plugin,ui-config.json is the configuration file is what the UI platform sees at runtime.\n\nIt is important to add the capability for referencing your plugin's javascript modules or assets such as image, svg, font, etc., files which had been created during the build time.  \n\nThis plug-in outputs the ui-config.json file with the paths of the generated assets. \n\nExample output:\n\nThe output is a JSON object in the form:\n\n\t \n\nFor example, given the following ui-config.js and webpack config:\n\nui-config.js\n\nmodule.exports = ( ) =  ,\n            \"contributions\":  ]\n             \n         \n    \t \n \n\nwebpack config\n\nconst AssetRefPlugin = require(\"@cisco-dna/asset-ref-plugin\");\nmodule.exports =  ,\n\t    output:  ,\n\t    plugins: [new AssetRefPlugin( )]\n\t ;\n\nThe plugin will output the following json file:\n\n\t ,\n\t    \"contributions\":  \n\t      ]\n\t     \n\t   \n\t \n\n Options\n\nYou can pass the following options:\n\t\nconfigFilePath: ui-config.js file Location. ex: /path/to/ui-config.js\n\t\nsrcPath - Source path of the asset file.\n\noutputPath -  Output path for ui-config.json.(relative to the output path of webpack)\n\nwatch mode\n\n ui-config.js and the assets  also will be watch for any changes in watch mode.\n \n \twebpack --config=webpack.config --watch\n \t\n webpack compile Output\n\t\n \t","id":4},{"path":"/guides/contributionmodel/contribution-model","date":"2017-03-03T11:40:25-08:00","title":"Plugin Contribution Model","url":"\"/guides/contributionmodel/contribution-model\"","menu":"menu:","  main":" main:","    parent":"   parent: \"contribution-model\"","    weight":"   weight: 2","content":"\nPlugin Contribution Model\n\n Overview\n\nThe contribution model is the mechanism in the DNA UI framework that allows plugins to contribute functionality to the overall system.  As the system itself is composed of plugins, this means that any DNA plugin can both receive and provide contributions from or to other plugins.\n\nA plugin that receives contributions does so without having any advance knowledge about which particular plugins will be contributing.  It has no source or build time dependencies on such plugins, and makes no assumptions about where such plugins physically live.  For instance their source artifacts might be remote, or might be co-located on the same file system.\n\nAt it's very core, a contribution is really just a piece of data shared between plugins.  This data is specified declaratively via a plugin's ui-config.json.  Let's take a look at what this means.\n\nConfiguration\n\n Hosting Plugin\n\nA plugin that wants to receive contributions should declare this fact in its ui-config.json, via the extensionPoints attribute.  In this document, we refer to plugins that receive contributions as hosting plugins.\n\nLets start out with a basic example:\n\nui-config.json\n\n ,\n      \"resultWidget\": { \n     \n   \n \n\nEach key in the extensionPoints object represents a kind of contribution.  Key names (e.g. resultsProvider) can be arbitrarily chosen by the hosting plugin, and should indicate the type of contribution expected.  The values are objects, and should specify metadata, in the form of a JSON schema, indicating the expected shape of a contribution, as well as documentation for each expected attribute.  Contributions are validated against these schemas at runtime, and are rejected if they don't pass.\n\nFollowing is an example with the schemas filled out:\n\nui-config.json\n\n \n           ,\n          \"module\":  \n         ,\n        \"required\": [\"module\"]\n       ,\n      ...\n     \n   \n \n\nThe above says that each resultsProvider must specify a module property, and can optionally provide a role property.  Each property has a type - roles should be an array of strings, and module is of a pre-defined type called module (more on modules later).\n\nNow, lets take a look at the contributing plugin.\n\nContributing Plugin\n\nAs you might have guessed, the example above represents a hypothetical search plugin that can receive search result contributions.\n\nA plugin that wants to contribute specifies this fact in its ui-config.json, like so:\n\nui-config.json\n\n ]\n     \n   \n \n\nAbove, we specify that we're contributing a resultsProvider to the cisco.dna.core.search plugin.  The module property refers to an AMD JavaScript module that will get loaded (via require), whenever the hosting plugin needs to use it.\n\nThe module specified above would generally be expected by the hosting plugin to implement a specific interface.\n\n Contribution API\n\nHosting plugins can use the contribution API to query the system about which plugins contribute to one of its extension points.  To ask for the resultsProvider contributions, our cisco.dna.core.search plugin could do the following:\n\ndna/core/search/Search.js\n\nrequire([\"external/core/utils/PluginContributions\"], function(PluginContributions)  )\n\nThe forExtensionPoint API returns an array of contribution objects.  Each has the following properties:\n\nsourcePluginId - a string indicating the contributing plugin's id.\ndata - the data contributed by the plugin.  In our example, our contributing plugin provides a module (and optionally could have provided role, per the extension point schema).\nloadModule() - this is a function that loads the module specified by the contribution.  An extension point might expect a different property value for modules, or might even have multiple properties specifying modules.  For example, if it expected the attribute view to specify a module, it would invoke loadModule(contrib.data.view).  If no argument is passed, you get the equivalent of calling loadModule(contrib.data.module).  This function returns a Promise which resolves to whatever the module exports.\n\nHere's an example of how we might implement search, by aggregating results from resultProvider implementations:\n\ndna/core/search/Search.js\n\nrequire([\"external/core/utils/PluginContributions\"], function(PluginContributions)  \n  return performSearch\n )\n\nWith the above, we now have a search implementation that delegates search queries to contributing plugins and gathers the results.  This is a simplistic implementation of course - a more serious one would have to deal with pagination and probably more.\n\nHopefully, from looking at the above, you were able to imagine what a contributing plugin's implementation of a resultProvider would look look like.  If not, here's a hypothetical one to nudge your imagination along:\n\ndna/core/userManagement/UserSearchResultsProvider.js\n\nrequire([/.../], function(/.../)  )\n        .map(user = (  ))\n     \n   \n )\n\nAbove, we've imagined that we lookup users with a matching name in the database, and return a result object for each one (with contrived attributes).\n\nContributing UI\n\nWhat if we want to receive UI contributions?  In other words, what if we want allow other plugins to participate in the rendering of our views?\n\nTurns out that we already have the mechanics in place.\n\nTo render something on a web page, we ultimately need to insert a node somewhere within the DOM.  These days there are zillions of different view libraries and frameworks that help one do this:\n\nconst element = document.createElement(\"div\")\n// ...populate the element's attributes and children,\n// perhaps using your favorite view framework.\ndocument.body.appendChild(element)\n\n Generic View Interface\nIf we want to receive view contributions from a plugin, we can require it to export a function that can create a DOM element with its view content when we need it.  We can do this without imposing use of particular view framework by the contributing plugins.  From the perspective of the UI platform and plugins, the view framework is the DOM.\n\nWith this in mind, plugins contributing views should implement an interface that matches the following:\n\nexport default function createView()  ,\n    /**\n     Optional method - should perform any necessary cleanup.\n     */\n    dispose()  \n   \n \n\nA hosting plugin invokes this at the time it is needed, passing context that the contributor might use to figure out exactly what to render.  Think of context as the data you might use to render a handlebars template, or props you would use to render a React component.\n\nIf the context gets updated, the hosting component calls getDOMNode again.\n\nWith this in place, contributing plugins can use any view framework they like, provided that they satisfy the contract above.\n\nHere's an example of how an implementation that uses Handlebars might look:\n\nAwesomeViewContribution.js\n\n// ES6 syntax\nimport viewTemplate from \"./AwesomeView.handlebars\"\n\nexport default function createView()  ,\n    dispose()  \n   \n \n\nAnd here's one that renders a React component:\n\nAwesomeViewContribution.js\n\nimport ReactDOM from \"react-dom\"\nimport AwesomeComponent from \"./AwesomeComponent\"\n\nexport default function createView()  /, root)\n      return root\n     ,\n    dispose()  \n   \n \n\nGiven that the above is a common pattern, we can encapsulate it into a function.  In this case we want a function that takes a React component as input, and returns an implementation of the generic view interface.\n\nGiven such a function, our React example could be simplified:\n\nMyViewContribution.js\n\nimport   from \"@cisco-dna/react-utils\"\nimport AwesomeComponent = from \"./AwesomeComponent\"\n\nreturn genericViewFromComponent(AwesomeComponent)\n\nAnd here's how genericViewFromComponent looks:\n\ngenericViewFromComponent.js\n\n/**\n Adapts a react component to a dna platform generic view\n */\nexport default function genericViewFromComponent(Component)  /, root)\n        return root\n       ,\n      dispose()  \n     \n   \n \n\nA library containing genericViewFromComponent is provided here.\n\nUsing this approach, receivers of view contributions don't have to know or care about how contributors render themselves.  The interfaces don't impose a view framework choice, aside from assuming that we're rendering DOM elements.\n\nMore About Modules\n\n Multiple Scripts and Libraries\n\nWhen specifying contributed modules in ui-config.json, you might need to load more than one JavaScript resource.  This is possible by specifying an array:\n\n\"contributions\":  \n\nThe host plugin that loads the module gets whatever is exported by the last JavaScript resource in the module array.\n\nYou might need also need to have the system require() a library defined by your JavaScript.  This will happen if you specify a require attribute.\n\n\"contributions\":  \n...\n \n\nGiven the contribution in the above example, the host plugin gets whatever is exported by the module being required.\n\nContributing CSS\n\nYou might want to add CSS content to a page if you're contributing a view.  Typically CSS will be baked into JavaScript modules via dpm/webpack, so you don't have to do anything special.  But if you have a situation where you need to load a standalone CSS asset when a module is loaded, specify a css attribute:\n\n\"contributions\":  \n...\n \nWhen invoked, loadModule() API ensures that all specified CSS assets are loaded.\n\n Service Injection\n\nServices can be automatically injected into modules when they are loaded, by specifying an inject property:\n\n\"contributions\":  \n...\n \n\nFor more information about how service injection works, take a look at the [service documentation] (  )\n\nCommon Resources\n\nYou might have JS and/or CSS that is common to all modules, that you want to ensure are required or injected prior to loading any module defined in your plugin.  You can specify these in one place so that you don't have to repeat them for every contribution in your plugin.  Do this by specifying a modulePreload attribute at the top level of your ui-config.json:\n\n\"modulePreload\":  \n\nThe value of modulePreload is the same as modules specified in contributions.\n\n Sandboxing\n\nIt is possible to sandbox plugin contributions such that all of their code runs / renders inside of IFrames, isolating styles and the global JavaScript context from the receiving plugin.  The API for dealing with such contributions is somewhat different.  The biggest difference is that all interaction between the receiver and contributor is asynchronous.\n\nIn the examples below, we'll re-visit our search example from the first part of this document.\n\nContributing Plugin\n\nSurprise!  In the search scenario, no change is needed to the contributing plugin's code!\n\n Hosting Plugin\n\nHere's what the hosting plugin's code would look like if it wanted to sandbox each contributing plugin.  Changed lines are noted in the comments.\n\ndna/core/search/Search.js\n\nrequire([\"core/utils/PluginContributions\"], function(PluginContributions)  \n  return performSearch\n )\n\nNote that although the contributing plugin exports a synchronous API, the hosting plugin gets an aysnchronous version of it.\n\nThis is because under the hood, the hosting and contributing plugins communicate with each other via window.postMessage, which is an asynchronous mechanism for exchanging information between frames.  The value returned by getExport() is actually a proxy to the object exported by the contributing plugin.\n\nAlso note that, if the contributing plugin exports something other than an object, the hosting plugin will get a copy (via a serialize + deserialize step) of whatever it exports rather than a proxy.  Thus the contributing plugin must export a serializable value in this case.\n\nCleaning Up\n\nHosting plugins must call dispose() after they are finished with sandboxed resources:\n\nconst sandbox = contrib.renderSandbox()\nconst exportedStuff = sandbox.getExport()\n// do things...\nsandbox.dispose()\n\nCalling dispose() removes the IFrame associated with the sandbox as well as all installed event listeners.\n\n Messaging API\n\nContributing code running inside of a sandbox can send messages to the hosting plugin:\n\nwindow.__pluginSandboxContext.sendMessage(\"someMessage\", data)\n\nNote that data must be serializable.\n\nHosting plugins do the following to consume these messages:\n\nconst remove = someContribution.on(\"someMessage\", (data) =  )\n\nremove() can later be invoked to remove the registered listener.\n\nSandboxed Views\n\nIn the previous example, the hosting plugin invoked code from a contributing plugin.  But what if we want a contributing plugin to render a view inside of a sandbox?  Lets take a look at how we can do this.\n\n Hosting Plugin\n\n//...\n  const containerElement = document.createElement(\"div\")\n  new PluginContributions(\"cisco.dna.someHostingPlugin\")\n    .forExtensionPoint(\"resultsProvider\")\n    // render the sandbox IFrame inside of containerElement\n    .map(contrib = contrib.renderSandbox(containerElement))\n//...\n\nContributing Plugin\n\nThe contributing plugin gets a clean IFrame within which it can render whatever it wants.  In simple cases where no context is required from the hosting plugin, we can simply render to document.body:\n\n  const myView = document.createElement(\"div\")\n  myView.textContent = \"Hello, sandboxed world!\"\n  document.body.appendChild(myView)\n\nAbove, we don't export anything for the host plugin.  Contrast with previous UI examples, where we exported a generic view factory for hosting plugins to invoke whenever they need something to render.  Sandboxed plugins can still do this if they need context:\n\nimport viewTemplate from \"./AwesomeView.handlebars\"\n\nconst root = document.createElement(\"div\")\ndocument.body.appendChild(root)\n\nexport default  ,\n  dispose()  \n \n\n Web Workers\n TBD\n","id":5},{"path":"/guides/contributionmodel/settings-contribtuions","date":"2017-03-03T11:40:25-08:00","title":"Settings Contributions","url":"\"/guides/contributionmodel/settings\"","menu":"menu:","  main":" main:","    parent":"   parent: \"contribution-model\"","    weight":"   weight: 3","content":"\nSettings contributions\n\n Overview\n\nThe mechanism to contribute Settings pages as views to DNA System 360  Settings.\n\nConfiguration\n\nThe settings contribution model is an implemention of the Generic view interface.\n\nFollowing is an example with schemas filled out:\n\nui-config.js\n\nmodule.exports = ( ) =  )\n  const modulePreload = common ?   : { \n  return  ,\n      modulePreload,\n      contributions:  \n        ]\n\n       \n     \n   \n \n\nsettingsItem/View.js\n\nimport styles from \"./styles.scss\"\n\nconst createView = () =  )  ,\n    dispose() { \n   \n \n\nexport default createView\n","id":6},{"path":"/guides/dashboard/dashboard","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 5","title":"Preconfigured Dashboard","content":"\nOverview\nThe dashboard is where everything comes together. You will configure it via \n Config\nCreating a dashboard is just contributing a view, then adding route to platform_ui. See \nLets break this down a bit:\n    \"cisco.dna.core/view\"\nWe are going to be contributing a view to the platform view registry (TBD)\n\nHere is an example view:\n\n \n\ncisco.dna.core.shell/route\nWe are contributing a route to the shell core-plugin\n\npath: \"/test/dashboard\",\n\nThis is the route your dashboard will appear on, e.g. \nviewRef:  \n \nThis will tell the dashboard to render your dashboard view which you defined earlier.\n\nNow what?\nIf you followed all the steps, your dashboard should be present on the path which we setup during this step. Go check it out!","id":7},{"path":"/guides/dashboard/dashboardLibrary","date":"2017-09-05T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 6","title":"Dashboard Library","content":"\nOverview\nThe Dashboard Library is the place where you can view all the dashboards in the system, as well as where you go to create blank dashboards or dashboards from templates. \n\nAs of now, the current UX pattern for allowing dashboard creation is either 1) Creating a blank dashboard or 2) Creating a dashboard from a template (you will be contributing a template).\n\nDashboard Library categories will only show if you have at least 1 template contributed to it.\n\n Config\nThe Dashboard Library takes contributions. You can view the samples in \n\ndashboardLibraryCategories:  ,\n        id:  ,\n        iconClass:  ,\n        description:  ,\n        module:  ,\n        showActions:  \n     ,\n    required: [\"title\", \"id\", \"iconClass\"]\n \n\ndashboardLibraryDashboards:  ,\n        href:  ,\n        id:  ,\n        meta:  ,\n                description:  ,\n                imageSrc:  \n             \n         ,\n        viewRef:  \n     ,\n    oneOf: [\n         ,\n         \n    ]\n \n\nAs you can see, there are 2 possible configurations for a \nModule API\nYou may have noticed in the schema for \nHere is a short snippet of the API\n\n    /**\n    @param    viewRef the viewRef containing the template which was clicked\n    @param    openSidebar a function which will open the sidebar\n    @param    closeSidebar a function which will close the sidebar\n    */\n    export default function onClick(\n        viewRef,\n        openSidebar,\n        closeSidebar\n    )\n`","id":8},{"path":"/guides/dashboard/dashboardchanges","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 10","title":"Dashboard Changelog","content":"10/10/2017\nUpdated dashboardSamples repo - global filter changes\nBREAKING CHANGES:\n    Updated [Global Filters] (  ) config and contribution style. Global filters + config are now contributed to dashboard, rather than being part of a dashboard's config.\n\n 10/6/2017\nUpdated dashboardSamples repo - cleaned up example to move id to the predefined dashboard rather than the dashboard template. Removed showActions (default to true)\nUpdated [Dashlet Library] (  ) href enabled schema to take mandatory field dashboard id. Also, changed showActions to be defaulted to true.\n\n10/5/2017\nUpdated dashboardSamples repo\nUpdated [Dashboard] (  ) config to allow for breadcrumb support, cleaned up the documentation properties.\n\n9/29/2017\nUpdated dashboardSamples repo\nAdded new Dashboard config option for Dashlets to create dashlets with ability to be copied: \n 9/27/2017\nUpdated dashboardSamples repo\nUpdated [Global Filters] (  ) config as it was outdated. Added prop \n9/26/2017\nUpdated dashboardSamples repo\nUpdated [Dashlet Library] (  ) config to enable navigation via href\nBREAKING CHANGES:\n    \n9/25/2017\n\nUpdated dashboardSamples repo\nAdded [Dashlet Library] (  )\nMinor changes to [Dashboard Library] (  ) contribution model to add description. Also, categories are only shown if they have at least 1 template contributed to them.\nBREAKING CHANGES:\n    \n\n9/25/2017\n\nStyle fixes\nChange to Dashboard title. It is editable only in custom dashboard.\n\n 9/18/2017\n\nUpdated dashboardSamples repo\nAdded new Dashboard config option for Dashlets to create dashlets without padding: \n\n9/15/2017\n\nAdded ability to change dashboard title in edit mode.\n\n 9/11/2017\n\nUpdated dashboardSamples repo\nAdded 3 new Dashboard config options for Dashlets : BREAKING CHANGES:\n    \n9/5/2017\n\nUpdated [Global Filters] (  ), cleaned up some typeos and removed some props\nUpdated dashboardSamples repo\nAdded [Dashboard Library] (  )\nAdded [Dashboard Service] (  )\nBREAKING CHANGES:\n    Dashboard contribution schema/config has changed from being a direct route contribution to accepting a viewRef which will have to be defined separately. See [Dashboard] (  ) for more information.","id":9},{"path":"/guides/dashboard/dashletLibrary","date":"2017-10-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 7","title":"Dashlet Library","content":"\nOverview\nThe Dashlet Library is the place where you can view all the contributed dashlet templates in the system. You can select and add Dashlets which will then appear in your Dashboard.\n\n Config\nThe Dashlet Library takes contributions. You can view the samples in \n\ndashletLibraryCategories:  ,\n        id:  \n     ,\n    required: [\"title\", \"id\"]\n \n\ndashletLibraryDashlets:  ,\n        id:  ,\n        viewRef:  \n     ,\n    required: [\"categoryId\", \"viewRef\", \"id\"]\n \n`","id":10},{"path":"/guides/dashboard/dashlets","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 3","title":"Dashlets","content":"\nOverview\n\nDashlets are the views which display your content. Your dashlet views can be written in any framework you want, but must expose a common interface (see using a view framework for more info).\n\n Create a Dashlet\n\nView\nFirst, you need to create a view, which will be rendered as a dashlet on your dashboard.\n\nSee \nThese views are like all other dashboard views and will expect a getDOMNode and dispose funciton to be present. An example of this can be found at [Generic view interface] (  )\n\nPlease note, getDOMNode may be called semi frequently, so you should try and make your getDOMNode as efficient as possible. Try to selectively update the DOM, or use a framework with virtual dom.\n\nAnd of course, avoid all syncronous / sync:true ajax requests :)\n\nProps\n\n Events\nTBD.\n\nConfig\nNow that you have created your view, you need to contribute it to the platform's view registry.  See dashlet/ui-config.js for an example of how to do this.","id":11},{"path":"/guides/dashboard/globalFilters","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 2","title":"Global Filters","content":"\nOverview\nGlobal Filters provide a filter which is applicable to all dashlets. Changing the value of one of these filters will send the filter value to each dashlet and will change what data it displays (if it is supported). The global filter values can be overridden by [Local Filters] (  )\n\n Views\nThere are multiple global filter views which can be configured with the dashboard. See [config] (  ) later.\n\nAn example of the views which will render in the top right next to the dashboard title are:\ndashboard/src/DashboardConfig.js, dashboard/src/DashboardConfig2.js, dashboard/src/DashboardConfig3.js\n\nThe second optional view dashboard/src/DashboardConfigBottom.js will be rendered on the bottom of the header, and will take up the full width of the screen.\n\nThe last optional view dashboard/src/ToggleableDashboardConfigBottom.js is an example of a view which will slide up/down with a toggle function (see \n\nThese views are like all other dashboard views and will expect a getDOMNode and dispose funciton to be present. An example of this can be found at [Generic view interface] (  )\n\nProps\nrefresh - call this function to refresh the dashboard data\n\ntoggleBottomFilterArea - call this function to show/hide the bottom filter area\n\nonChange - call this function once a preference has been updated. It can take either full or partial object. You can update it will full or partial filter object. If partial, the data will be mixed in with the previous value using \n \nThis means if the user removes a filter, you MUST set the value to null if it was previously set. \n\nexample usage:\nonChange( )\n\n Config\nNow that you have created your view(s), you need to contribute them to the platform's view registry.\n\nAn example is this:\n ,\n\nSee dashlet/ui-config.js for more examples of how to do this. \n\nAfter you contribute the views, you will now contribute the viewRefs, along with an id, to the dashboard.\n\nAn example is this:\n \"cisco.dna.core.dashboard/dashboardFilters\": [\n     \n         ,\n        id: \"myFilterId\"\n     ,\n    ...\n ]\n\nNow, you can use the filters by referencing the id in the following:\n\ntopGlobalFilterViewRefs - the top right global filters\n\nbottomGlobalFilterViewRefs -- the mid level full screen filters (always shown)\n\nactionViewRefs - These are action toggles which will appear next to \nAn example of usage in dashboard config is\ntopGlobalFilterViewRefs: [\n    \"cisco.dna.dashboardPlugin/myFilterId\"\n],\n\nWhere the string \"cisco.dna.dashboardPlugin/myFilterId\" is \"pluginId/filterId\"\n\nRequired Global Filters\nThere may be a case where Dashlets depend on certain global filters to be present. This will appear in the custom dashboard situation where you start with a blank dashboard, and add dashlets via the dashlet library. Upon adding dashlets, the global filters should be added dynamically if they are expressed as a dependency in the config. This is handled via \n Toggleable Global Filters\nAs mentioned above, and \n     ,\n            toggleableBottomGlobalFilterViewRef:  \n             \n         ,\n        id: \"myActionView\"\n     ,\nYou can use this the same way as mentioned above. \n\n    actionViewRefs: [\"cisco.dna.dashboardPlugin/myActionView\"]\n\nAs you can see in the above example, we are contributing 2 views. One is the action, and one is the toggleable filter. When rendered, the view \nOne extra piece of config is the isOpenByDefault boolean value. If set to true, upon first rendering the dashboard, the item will be default expanded. If it is not set, or it is false, it will be collapsed and hidden, requiring the user to click the action to see the filter content.","id":12},{"path":"/guides/dashboard/","date":"2017-08-18T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 1","title":"Dashboard Overview","content":"\n\nThe Dashboard Framework is a core-plugin within platform_ui. It uses core concepts from the platform such as contribution model, services, and view registry to create dashboards. Everything is configured in your plugin's \nIt provides you the ability to contribute a preconfigured dashboard with dashlets, global and local filters. It has a grid system which allows dashlets to be resized and moved. The changes in your dashboard are saved to the platform's persistance store, so their changes are saved to the user account no matter what browser you use.\n\nThere are several pieces involved in creating a preconfigured dashboard:\n\n[Global Filters] (  )\n[Dashlets] (  )\n[Local Filters] (  )\n[Dashboard] (  )\n\nIn this guide, all code references are located at https://sjc-apl-grt28.cisco.com:8081/#/admin/projects/dashboardSamples Please download this as it will be referenced extensively in the docs.","id":13},{"path":"/guides/dashboard/localFilters","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 4","title":"Local Filters and Fields","content":"\nOverview\n\nLocal Filters and Fields are dashlet specific filters and fields which will be used to customize the data and view of you dashlet. They will appear during edit dashlet.\n\n Views\nFilters and Fields are separate but similar views. See \nThese views are like all other dashboard views and will expect a getDOMNode and dispose funciton to be present. An example of this can be found at [Generic view interface] (  )\n\nProps\n \nThis means if the user removes a filter, you MUST set the value to null if it was previously set. \n\nexample usage:\nonChange( )\n\n Config\nThese views will be contributed to the view registry and be referenced later in the [Dashboard] (  ) section. See dashlet/ui-config.js for an example of contributing them to the view registry.","id":14},{"path":"/guides/dashboard/service","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 9","title":"Dashboard Service","content":"\nOverview\nThe dashboard service provides an API for you to do some operations on the Dashboard.\n\n Usage\n\nFor information about services go \n[here] (  )\n\nA sample of using the service is something like:\n  serviceRegistry\n      .getService(\"cisco.dna.core.dashboard\", \"dashboard\")\n      .then(Dashboard =  );\n\nAPI\n\nThe following methods are part of the dashboard API:\n    /**\n     Creates a dashboard from a template\n     @param    viewRef the viewRef for the dashboard\n     */\n    createDashboard(viewRef)\n\n    /**\n     Create a blank dashboard which user can customize\n     only has scope global filter\n     */\n    createBlankDashboard(title)\n\n  /**\n     * @param   id the dashboard id \n     @param   isEditMode if it should redirect to edit mode\n     */\n    redirectToDashboard(id, isEditMode)\n\n/**\n     Validates that a title does not exit\n     @return a promise\n     */\n    validateTitle(title)\n`","id":15},{"path":"/guides/dashboard/sidebar","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: dashboard-framework","    weight":"   weight: 8","title":"Sidebar","content":"\nOverview\n\nThe dashboard's sidebar can be opened / closed and custom content can be rendered within it.\n\n API\nThe API will be props sent to your getDOMNode. This will currently be sent to: Dashlets and also optionally to the contributed onClick module for Templates.\n\nThe API is as follows:\n\n/**\n Opens the dashboard sidebar\n @param    viewRef the view registry viewRef + config.\n  \n  \n @param    width the width in %\n @param    title the title of the sidebar\n @param    dashletId (optional) the dashletId of the selected dashlet to be sent as params\n to your sidebar view\n */\n \nopenSidebar(viewRef, width, title, dashletId)\n\ncloseSidebar()\n`","id":16},{"path":"/guides/dnapluginmanager/dna-plugin-manager","date":"2017-03-03T11:40:25-08:00","title":"DNA Plugin Manager","menu":"menu:","  main":" main:","    parent":"   parent: dna-plugin-manager","    weight":"   weight: 2","content":"\nDNA Plugin Manager\n\n       __\n  _/ /  __ _\n / _  / _ \\/ _ `_ \\\n/ // / // / / / / / /\n\\,_/ ./_/ // /_/\n    /_/\n\n What\nThis is a command line tool that can be used to:\n\nGenerate a new DNA UI plugin skeleton\nRun plugins in dev mode, with live/hot reloading, hosting them in a remote DNA UI platform instance\nPackage plugins for production deployment\n\nWhy\n  Provide an optimal DNA plugin development workflow out of the box, with support for ES6+, live/hot reloading, production builds, etc\n  Avoid baking common dev/build logic into every plugin\n  Take advantage of the latest tooling improvements via a simple yarn/npm upgrade\n\n Installation\nInstall Node.js version = 6.10, if you don't already have it.\nnpm -g install @cisco-dna/dpm --registry http://engci-maven-master.cisco.com/artifactory/api/npm/apic-em-npm-group/\n\n NOTE: If you run into permissions problems when installing with npm -g, one way around this is to run with sudo.  But we don't generally recommend this, because npm packages can run arbitrary scripts, and you don't want these scripts running as root.  See here for a way to resolve this.\n\nUsage\n\n Create a plugin skeleton\ndpm create projectDirectory creates a new plugin skeleton in the given directory.\n\nStarting the dev server\nBaked into DPM is a dev server which provides useful functionality for plugin development.  It transforms, bundles, and serves your plugin assets.  It also watches for file changes and performs browser hot reloading of your plugin's modules when they change.\n\nThe dev server can be started for one or more plugins.  Here are a few examples:\n\n  dpm start in a plugin directory or dpm start /path/to/plugin for a single plugin\n  dpm start /path/to/plugins/plugin1 /path/to/plugins/plugin2 for multiple plugins\n  dpm start /path/to/plugins/* for all plugin subdirectories in /path/to/plugins/\n\nDuring plugin development, you need access to a platform UI instance to test against.\n\n Point a platform UI instance at your plugin\n\nDPM enables a workflow whereby plugins can be developed independently from the platform.  The platform instance can be remote, or can be running locally on your machine.  With this approach, the platform does not have any knowledge about where your plugin code physically resides on the file system.\n\nStart a dev server for your plugin(s):\n  For running with a remote platform instance: dpm start -s yourPluginDir.  This serves your plugin over SSL (https).\n  For running with a local platform instance: dpm start yourPluginDir.\nIf you started dpm with -s, visit https://localhost:3002/ui-config.json and override the security warning your browser presents.  This is a one time thing.\nVisit http(s)://[your-platform-cluster-ip]/developer.\nPaste http(s)://localhost:3002/ui-config.json into the text field, and click the add (+) button.  Your plugin(s) should then appear in the list.\n\nPackaging plugins for production deployment\n\n  dpm build [pluginDirs...]  builds the plugin in the current directory or the plugins in the specified directories for production.  Note that globs (e.g. path/to/plugins/*) can be used. By default, output gets written into the dist subdirectory of each built plugin.\nOptions:\n  --verbose Display verbose build output\n  --analyze Generate a bundle analysis report\n\nThe build output written to dist contains everything you need to deploy to have your plugin run in production.\n\n Plugin manifests\n\nDNA UI plugins are required to have a manifest file that describes them.  When you create a plugin sekelton via dpm create, a ui-config.js file is generated, which can be customized as needed.  Your ui-config.js exports a function that returns a data structure representing your plugin's configuration.  This configuration is what the UI platform sees at runtime.\n\nNote that the ui-config.js script is executed at build time.\nWhen your plugin is built via dpm build, the configuration object returned by the ui-config.js exported function is written to ui-config.json in the dist directory of your plugin.  Therefore, the return value of the function must be serializable to JSON.\n\nReferencing modules and assets in contributions\nIf you're referencing your plugin's javascript modules or assets such as images within contributions, it's important to use the assetRef function to inject the path name generated for your module at build time.  For example:\n\nmyPlugin/ui-config.js\nmodule.exports = ( ) =  ]\n       \n     \n   \n )\n\nTranslates into something like:\nmyPlugin/dist/ui-config.json\n\"contributions\":  \n      ]\n     \n\nNote that the plugin module has a hash value its name.  Such files can be cached in the browser forever, because the file name will change whenever the content changes.  The assetRef function can be used to reference image, svg, and font files as well.  When used with such assets, dpm's build logic will ensure that they are copied out into the build output directory (dist by default), with hashed filename suffixes.\n\nYou can see this for yourself if you inspect the ui-config.json file that gets generated in the dist directory of your plugin after running dpm build.\n\n Webpack configuration\ndpm uses Webpack 2.x to bundle plugin scripts and other assets.  The default configuration has the following features:\n\nES6 via babel-loader (presets: es2015, react, stage-2)\nHot module replacement on save\nAuto remount of React components when their respective modules change\nDisplays compile errors in the browser and terminal\nDisplays runtime errors that occur in React render methods in the browser\nSass support via sass-loader\nLess support via less-loader\nLocal CSS modules by default, via css-loader\nautoprefixer (via postcss-loader)\nSource Maps\nMinification of production builds\nBundle size analysis via dpm build --analyze\npng,jpg,gif,svg,eot,ttf,woff,woff2 data urls via file-loader\n\nCustomizing your plugin's build\nYou might need to customize your plugin's build.  For example, you might want to add a plugin or loader to the underlying webpack build pipeline.\n\nTo do this, create a file named dpm.config.js in the plugin's directory.  It should either export a function, or export an object containing a customize function:\n\nmodule.exports =  \n \n\nThe function will be called at build time, and will be passed as input a base webpack config.  It should return a config modified to suit its needs.  The webpack-merge library is extremely useful for merging your config with the base config.  Here's an example.\n\nNote that when referencing webpack modules that are in your plugin's devDependencies, you will likely need to use require.resolve to get an absolute path to them.  For example:\n\n ,\n        exclude: [path.resolve(_dirname, \"nodemodules\")]\n       \n    ]\n   \n \n\nIf you have a customization that you feel would be of general benefit to plugin developers, contact the dpm team.  And we're happy to entertain pull requests :-)\n\n Import src relative modules\nThe default webpack config for dpm defines ~ as an alias to the src root of your plugin.  You can use this to import modules within your code using src relative paths.  For example, a module src/foo/FooModule can be imported from elsewhere using:\n\nsrc/bar/BarModule.js\nimport FooModule from \"~/foo/FooModule\"\n\nImporting external modules\nTo import external AMD modules (i.e. DNA Platform API modules), prefix the module you're requiring with external.  For example:\nimport domReady from \"external/domReady\"\nimport PluginContributions from \"external/core/utils/PluginContributions\"\n\n Contributing\nIf you want to contribute to dpm, perform the following steps:\n  Fork or clone this repo, and cd into it\n  Run npm -g install yarn && yarn && npm link\n\nThe npm link step sets you up with a global dpm command that runs code from your locally cloned repo.  Any changes you make to the codebase will be reflected when you run the command.\n\nContacts\nKhaled Agrama (khagrama@cisco.com)\nIain Hamilton (iaihamil@cisco.com)","id":17},{"path":"/guides/icons/dna","date":"2017-10-18T11:40:25-08:00","title":"DNA icons","menu":"menu:","  main":" main:","    parent":"   parent: icons","    weight":"   weight: 20","content":"\ndiv class='icon-container'\n    link rel=\"import\" href=\"/icons/Cisco-icons/demo.html\"\n/div\nscript src=\"js/icons/dna.js\"/script","id":18},{"path":"/guides/icons/dnac","date":"2017-10-18T11:40:25-08:00","title":"DNAC icons","menu":"menu:","  main":" main:","    parent":"   parent: icons","    weight":"   weight: 10","content":"\ndiv class='icon-container'\n    link rel=\"import\" href=\"/icons/dnac-icon/demo.html\"\n/div\nscript src=\"js/icons/dnac.js\"/script","id":19},{"path":"/guides/rbacui/examples","date":"2017-03-03T11:40:25-08:00","title":"RBAC Examples","menu":"menu:","  main":" main:","    parent":"   parent: \"rbacui\"","    weight":"   weight: 5","content":"\n\nExample 1\n\nHide Add device button for user with no permissions\n\n Plugin.js\nconst createView = () =  \nexport default ( ) = rbac().then(\n    myRbac =  \n             \n         ;\n        myRbac.setIntents(myContributionPermission)\n        return createView\n       \n)\n\nFor user with permission:\n\nFor user without permission:\n\n Example 2\n\nDisable Add device button for user with no permission\n\n Plugin.js\nconst createView = () =  \nexport default ( ) = rbac().then(\n    myRbac =  \n             \n         ;\n        myRbac.setIntents(myContributionPermission)\n        return createView\n       \n)\n\n pluginCss.less\n// ...\n\n.intent--networkinventory-defaultgCreate .dt-addDevice-btn  \n.intent--networkinventory-defaultgCreate .dt-addDevice-btn .ds-label  \n.intent--networkinventory-defaultgCreate .dt-addDevice-btn .fa  \n\n// ...\n\nFor user with permission:\n\nFor user without permission:\n\nExample 3\n\nRemove Action Bar for user without permissions\n\n myPlugin.js\ndefine([\n\n// ...\n\n\"dna-service!external/cisco.dna.core.rbac/rbac\",\nfunction(\n\n// ...\n\nrbac)  ,\n         ,\n         ,\n         ,\n         \n    ]\n \n\n// ...\n\n            dtOptions:  \n                 ],\n                buttons: tableButtons\n             ,\n// ...\n\nFor user with permission:\n\nFor user without permission:\n\n","id":20},{"path":"/guides/rbacui/overview","date":"2017-03-03T11:40:25-08:00","title":"RBAC Overview","menu":"menu:","  main":" main:","    parent":"   parent: \"rbacui\"","    weight":"   weight: 1","content":"\n\nRBAC UI Implementation\n\nTo use RBAC in the UI, ui-config.js should look like\n\n ui.config.js\n\n      contributions:  \n           \n        ],\n       \n\n Plagin.js\n\nconst createView = () =  \nexport default ( ) = rbac().then(\n    myRbac =  ,\n              \"gUpdate\":  ,\n              \"gCreate\":  \n             \n         ;\n        myRbac.setIntents(myContributionPermission)\n        return createView\n       \n  )\n\nIn the above example if the user permission network.inventory-default is present and/or enabled from the RBAC API response, then the user will see these elements, otherwise they will be hidden.\nAs the Platform knows where these RBAC Contributions are coming from it is able to apply CSS rules with knowledge of what is running where and when.\n \nThe RBAC Core Plugin makes usage of AbsurdJS to construct the CSS from the provided \"selectors\". \n\n Custom CSS for permissions\n\nIf permission flag \"ignore\" is setted as \"true\", body element will have class for this permission lookig as\n\n .intent--[permissionName]__[permission]\n\nIn permission name dots should be replaced by double underscore.  Example for \"network.inventory-default\" will look like\n\n .intent--networkinventory-defaultgRead\n\nEnd result looking as follows.\n\n myPlugin.less\n\n.intent--networkinventory-defaultgRead .dt-exportAll-btn .ds-label  \n\nCheck user permission from JS code\n\nTo check does user have a permission from JS file, use following:\n\n myPlugin.js\n\n amd module syntax\ndefine([\n\t\"dna-service!external/cisco.dna.core.rbac/rbac\"\n], function(rbac)  );\n es6 module syntax\nimport rbac from \"dna-service!external/cisco.dna.core.rbac/rbac\"\n\n// ...\n\n// now you can make use of rbac service APIs\nvar isPermitted = rbac.checkPermission(\"network.inventory-default\", \"gRead\");\n\ncheckPermission will return \"true\", if user has the permission, \"false\" if does not have a permission and \"null\" if permission does not exist in API response.\n\nTo get all permitted operations by resource name\n amd module syntax\ndefine([\n\t\"dna-service!external/cisco.dna.core.rbac/rbac\"\n], function(rbac)  );\n es6 module syntax\nimport rbac from \"dna-service!external/cisco.dna.core.rbac/rbac\"\n\n// ...\n\n// now you can make use of rbac service APIs\nvar permittedOperations = rbac.getPermittedOperations(\"network.inventory-default\");\n`","id":21},{"path":"/guides/services/consuming","date":"2017-03-03T11:40:25-08:00","title":"Consuming Services","menu":"menu:","  main":" main:","    parent":"   parent: \"services\"","    weight":"   weight: 2","content":"\n\nServices can be consumed by plugins in various ways.\n\nService imports\n\nThe DNAC platform comes pre-baked with an AMD loader for platform services.  Plugins can import services just like they import regular modules.\n\nThis is the easiest way to consume services, but currently will only work for services that do not require context.  If you try to import a service that requires context using this method, you'll receive a runtime error.\n\n Example\nimport shellService from \"dna-service!external/cisco.dna.core.shell/shell\"\n\n// ...\n\n// now you can make use of shell service APIs\nconst queryParams = shellService.router.queryParams\n\nService injection\nThe DNAC platform has a built-in mechanism that can inject service instances into contributed modules.  Currently, this is the only way to leverage services that require context.\n\n Example\nThe below example illustrates a route view contribution that gets a persistence instance injected into it.  Any contributed module can receive service injections.\n\n ui-config.js\n\n  contributions:  \n     \n   \n\nThe system will check to ensure that requested services are registered.  If not, an error will be logged to the console, and the associated contribution will be disregarded.\n\nModules that ask for services to be injected, as in the example above, must wrap what they'd normally export with a function that receives these services as inputs:\n\n src/MyView.js\nexport default function( )  \n\nNote exported function receives an object that has the service names as keys (i.e. persistence, telemetry).  Their respective values are not direct service instances.  Instead they are functions that return promises.  This is to enable lazy loading of service modules only if/when they are actually used.\n\nKey names of injected services can be customized.  This is to handle situations where two service names might conflict.  Example:\n\n ui-config.js\n\n  contributions:  \n        ]\n       \n     \n   \n\nGiven the above, the cisco.dna.core/persistence service will be injected with the key persistence, while cisco.dna.someOtherPlugin/persistence will be injected with the key otherPersistence.\n\nService registry lookup\n\nLastly, DNAC provides a programmatic API to obtain service instances.\n\n Example\nimport serviceRegistry from \"external/core/utils/serviceRegistry\"\n\n// get an instance of the shell service\nserviceRegistry.getService(\"cisco.dna.core.shell\", \"shell\").then(persistence =  )\n`","id":22},{"path":"/guides/services/core","date":"2017-03-03T11:40:25-08:00","title":"Core Platform Services","menu":"menu:","  main":" main:","    parent":"   parent: \"services\"","    weight":"   weight: 3","content":"\nThis page documents various services exposed by the core platform.\n\nPersistence\n\nThe persistence service allows you to utilize the persistence store from the platform. This could be used to save user preferences, which will be saved to MongoDB and tied to the user account.\n\n Local Development Setup\nIf you do not have mongodb locally, the UI will still start and run as normal, however you will not be able to test development and persistence within the localhost environment.\nTo setup MondoDB for local development environment:\nThe easiest way is via\n\nbrew install mongodb\nmkdir -p /data/db\nmongod\n\nfollow this guide for more info or if you run into issues:\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\nOnce completed start your UI via ./dev-start after MongoDB has started.\n\nAPI\n    set(key, value)\n\n    get(key)\n\n    remove(key)\n\n Example\nYou need to inject the service into your ui-plugin via ui-config.js. See Consuming Services.\n\n    inject: [\"cisco.dna.core.persistence/persistence\"]\n\nOnce it is injected, you need to wrap your generic view with the persistence:\n\n  const myWrapper = persistence =  ,\n        ...\n       \n     \n   \n  export default ( ) = persistence().then(myWrapper);\n\nYou can now use the persistence API. For example, \nTelemetry\n\n API\n\nExample\n\n Shell\n\nThe shell service is documented here.\n\nTopology\n\nThe topolgy service is documented here.\n\n Dashboard\n\nThe dashboard service is documented here","id":23},{"path":"/guides/services/exposing","date":"2017-03-03T11:40:25-08:00","title":"Exposing Services","menu":"menu:","  main":" main:","    parent":"   parent: \"services\"","    weight":"   weight: 4","content":"\n This is an advanced topic - most plugins probably don't need to do this.\n\nExposing a service\nA plugin can advertise a service by contributing a module to the cisco.dna.core/service extension point.\n\n Example\n\n \n   \n \n\nThe contributed module, (MyService.js in the example above), should export whatever it wants to expose to the world.  For example MyService.js could look like:\n\nexport default  ,\n  doSomethingAwesome()  \n \n\nPlugins can consume the above service using the id cisco.dna.myPlugin/myService.\n","id":24},{"path":"/guides/services/overview","date":"2017-03-03T11:40:25-08:00","title":"Services Overview","menu":"menu:","  main":" main:","    parent":"   parent: \"services\"","    weight":"   weight: 1","content":"\n\nServices are a core DNAC platform mechanism that enable plugins to advertise APIs that can be consumed by other plugins.  Service modules are loaded on-demand when they're first requested.\n\nVarious services are exposed via core platform plugins, such as the persistence, telemetry, and the platform shell.\n\nServices can optionally be provided with context that indicates which plugins are consuming them.  This can be useful for plugins that want to offer scoped APIs.  The core persistence service is an example which takes advantage of this feature.\n","id":25},{"path":"/guides/shell/header","date":"2017-03-03T11:40:25-08:00","title":"Header Extensions","menu":"menu:","  main":" main:","    parent":"   parent: \"shell\"","    weight":"   weight: 3","content":"\n\nOverview\n\nThe shell offers extension points that allow the header UI to be extended.\n\n Header navigation\n\nThe shell provides an extension point for adding navigation menu items to the header.  Currently navigation menu items are contributed by the Design, Policy, Provision, and Assurance plugins in DNA center.\n\nExample\n\n ,  ]\n   \n \n\nThe above produces the following menu in the header:\n\n Properties\nlabel - Label for the menu item\nrootRoute - The parent path for which the menu item will be displayed.\ndefaultRoute - The route to visit when the menu item is clicked.  This does a window.pushState, rather than full page reload.\nhref - The route to visit when the menu item is clicked, via a full page reload. Usually you want to use defaultRoute.\nidentifierRoute - The parent path for which the menu item will show as selected.\nposition - Where to position the menu item horizontally, relative to others.\n\nHeader widgets\n\nTBD\n\n","id":26},{"path":"/guides/shell/overview","date":"2017-03-03T11:40:25-08:00","title":"Shell Overview","menu":"menu:","  main":" main:","    parent":"   parent: \"shell\"","    weight":"   weight: 1","content":"\nResponsibilities\n Route management\nThe primary function of the platform shell is to manage url routing between views contributed by plugins.  Typically, route view contributions will be the code execution entry point for plugins that want to render something on the screen.\n\nWhen the platform loads a page, the shell takes control after the platform initializes.  It then decides which view to render based on the url visited.\n\nThe platform also offers service-based APIs that plugins can use to query and manipulate the route, and listen for route changes.\n\nShell UI\nThe shell also provides a few extension points control the display of the platform UI header.  Plugins can specify top level menus, and contribute widgets to display on the top right of the screen.  The shell also provides an API for displaying notification popups on the screen.\n","id":27},{"path":"/guides/shell/routing","date":"2017-03-03T11:40:25-08:00","title":"Routing","menu":"menu:","  main":" main:","    parent":"   parent: \"shell\"","    weight":"   weight: 2","content":"\n\nMap a view to a route\n\nPlugins can assign their views to render when particular routes are visited, by specifying a route contribution in their plugin manifest.\n\n Example\n\n ui.config.js\n\n \n   \n \n\nFooView.js is expected to implement the generic view interface.\n\nArranging views into tabs\n\nPlugins can arrange multiple views into tabbed menus, each of which will have a unique url.\n\n Example\n\n ui.config.js\n\n ,\n               \n                    ]\n                   \n                 \n               \n            ]\n           \n         \n       \n     \n   \n \n\nThe above specifies that we want to display a set of tabs at route /dna/foo.  At the top level, we have two tabs, labeled \"First Tab\" and \"Second Tab\".  The second tab has another tab nested within it, called \"Nested Tab\".\n\nThe specified id values determine the query parameter names and values used to construct unique urls for each tab.  Tab ids and tab container ids should therefore be unique.\n\nNote that the above approach uses viewRef to render a pre-existing view, cisco.dna.core.shell/tabContainer, registered with the platform view registry (TBD).\n\nMixing in views from other plugins\n\nIn the previous example, you may have noticed that we specified values for mixinExtensionPoint.  Doing this provides an extension point name that can be used as a contribution target by other plugins to extend the tabContainer.\n\n Example\n\n ui.config.js\n\n \n      ]\n     ,\n    \"cisco.dna.myPlugin/fooNestedTabs\":  \n      ]\n     \n   \n \n`","id":28},{"path":"/guides/shell/service","date":"2017-03-03T11:40:25-08:00","title":"Shell Service","menu":"menu:","  main":" main:","    parent":"   parent: \"shell\"","    weight":"   weight: 4","content":"\n\nOverview\nThe shell exposes a platform service with various APIs, discussed below.  The shell service can be imported like so:\n\n Service Id\n\nThe id of the shell service is cisco.dna.core.shell/shell.\n\nIt can be imported like so:\n\nimport shell from \"dna-service!external/cisco.dna.core.shell/shell\"\n\nRouter API\n\nshell.router.location\n\nReturns data about the current url visited in the browser, similar to window.location.\n\nhr/\n\nshell.router.queryParams\n\nReturns an object with the current location's query params and values.\n\nhr/\nshell.router.push(someUrl)\n\nGo to someUrl, pushing it onto the history stack.  This does not cause a page reload.  If you need a page reload, use window.location.\n\nhr/\nshell.router.replace(someUrl)\n\nGo to someUrl, replacing the current url in the history stack.\n\nhr/\n\nshell.router.matchPath(\"/some/path\",  )\n\nIndicates whether or not the path given in the first param matches the criteria in the second param.  Implements the same API as the identically named function provided by react-router.\n\n Notification API\n\nshell.notifications.addNotification(messageData)\n\nDisplay a popup notification on the screen.  messageData should be an object with, at a minimum, the keys level, and message.  For example:\n\n shell.notifications.addNotification( )`\n\nPossible messageData properites:\n\nmessage - the message to display\nlevel - the type of message (\"error\", \"warning\", or \"info\")\nposition - the position to display the notification (\"br\", \"tr\", \"bl\", \"tl\", \"bc\", or \"tc\"; b means bottom, t means top, c means center, l means left, r means right)\nautoDismiss - delay in seconds for the notification go away. Defaults to 5 for info, success, and warning levels, and does not auto dismiss for error.\n\nhr/\n\n","id":29},{"path":"/guides/topology/appearance","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 4","title":"Visual Appearance","content":"\nTopology Style Properties\nThe Topology Properties allows for a style parameter that can perform many sweeping color appearance changes to the visuals of your Topology, apart from nodes, which is covered further down in this section. The following default style properties can be overwrote via the TOPO_PROPS.style value.\n\ntextColor: \"0096d6\",\ntextHighlightColor: \"#f2ad4e\",\ntextDisabledColor: \"#DDD\",\nlinkColor: \"#AAA\",\nlinkHoverColor: \"#049fd9\",\nlinkSelectedColor: \"#5edadd\",\nlinkHighlightColor: \"rgb(55, 222, 55)\",\nbackground: \"#FFF\"\n \nNode Icons\nThe Topology comes with a bunch of predefined appearances for devices and hosts. This is as follows:\n \nIcon and Family\nCorresponding Family Key\n \n| Family Icon     | Corresponding Family Key           |\n| ------------- |:-------------:|\n|   | \"cloud node\" br/ \"Switches and Hubs\"  br/ \"Cisco Interfaces and Modules\"  br/ \"Routers\"  br/ \" Wireless Controller\"  br/ \"Security and VPN\"  br/ \"Autonomous AP\"  br/ \"Unified AP\"  br/ \"WIRED\"  br/ \"WIRELESS\"  br/ \"PHONE\"  br/ \"Unauthorized Device\"  br/ \"MIXED\" |\n \nIn order for these icons to be used the node must contain a \"family\" key and value matching that of the above list.\n\nvar TOPO_DATA =  , family: \"Routers\" ,\n       , family: \"Switches and Hubs\" ,\n       , family: \"Routers\" ,\n       , family: \"cloud node\" \n    ],\n    links: [\n       ,\n       ,\n       \n    ]\n   \n ;\n\nThis Topology data feed would give the following output:\n\n \nNodes color can be easily customized by setting the customParam.color value. If you wanted a particular node to be black, you could do the following.\n\n , family: \"Routers\" \n \n \n\n \nUsing the Topology Util, you can change it at runtime too e.g if you wanted to make the nodes with ID 1, 2 and 3 #blue, you could do the following.\n\nmainTopology.util.isReady().then(function(response)  );\n \n\n \nAs long as you have access to the topology.util object, you can control the colors as well as appearance of nodes from anywhere within your UI application at any point.\n \nA node icon can be set at runtime. For instance, if we want to change the icon of a router to brick wall because we like bricks, we can do the following:\n \nmainTopology.util.isReady().then(function(response)  );\n\n \n \n \nNode Links\n \nLinks also have the ability to have their color and appearance set. The following example shows setting a dashed link, changing another links thickness, and coloring two of them. Note, for this, your links also require IDs.\n\nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\n\nexport default () =  , family: \"Routers\" ,\n             , family: \"Switches and Hubs\" ,\n             , family: \"Routers\" ,\n             , family: \"cloud node\" \n          ],\n          links: [\n             ,\n             ,\n             \n          ]\n         \n       ;\n      \n      var TOPO_PROPS =  \n      \n      var mainTopology = new Topology();\n      mainTopology.init(TOPOPROPS, TOPODATA);\n     \n      mainTopology.util.isReady().then(function(response)  );\n     \n\n  );\n\n  return  )  ,\n    dispose()  \n   ;\n\n \n\n \n \n\nThese properties can be set on initialization as well via the customParam:\n ...  \n ...  \n ...  \n \n \nNode Badges\n \nNodes can have badges as well, up to 8 badges per node is supported. A badge can either be a text value or an icon unicode value.\n\nmainTopology.util.isReady().then(function(response)  ,\n     ,\n     ,\n     \n  ]);\n );\n \n \n\nIcons can be applied with a custom icon font like so:\nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\n\nexport default () =  , family: \"Routers\" ,\n             , family: \"Switches and Hubs\" ,\n             , family: \"Routers\" ,\n             , family: \"cloud node\" \n          ],\n          links: [\n             ,\n             ,\n             \n          ]\n         \n       ;\n      \n      var TOPO_PROPS =  \n      \n      var mainTopology = new Topology();\n      mainTopology.init(TOPOPROPS, TOPODATA);\n     \n      mainTopology.util.isReady().then(function(response)  ,\n           \n        ]);\n       );\n     \n\n  );\n\n  return  )  ,\n    dispose()  \n   ;\n\n \n\n \n\n \nAgain like most other custom rendering parameters, this can be achieved at initialization via customParams:\n ]  ... \n\nCustom Icon Families and overwriting existing node styles\nAlthough you have the ability to set each node icon manually as discussed, there is an easier approach for dealing with all nodes of a particular family type not present in the default list. This method also allows you to overwrite the existing default family icons, colors and so on if desired.\nThis is done via the Topology properties.nodeAppearance object. Using the family name as the key you can then set various properties. In the bellow example we change the existing Router family to be green rather than purple, as well as introduce own unique family type \"My Obscure Family\".\n\nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\n\nexport default () =  , family: \"Routers\" ,\n             , family: \"Switches and Hubs\" ,\n             , family: \"Routers\" ,\n             , family: \"cloud node\" \n          ],\n          links: [\n             ,\n             ,\n             \n          ]\n         \n       ;\n\n      var TOPO_PROPS =  ,\n          \"My Obscure Family\":  \n         \n       ;\n      \n      var mainTopology = new Topology();\n      mainTopology.init(TOPOPROPS, TOPODATA);\n\n     \n\n  );\n\n  return  )  ,\n    dispose()  \n   ;\n\n \nThe above example will render the following\n\n \n\n \nThe available properties used throughout the Topology Framework for every node and the default values are:\nfront: \"\\ue612\", // The Front icon rendered for the node\nback: \"\\ue611\", // The optional back icon rendered for the node\nfont: \"next-font\", // The font family used for the node\ncolor: \"#006699\", // The default node color\ngreyOut: \"rgb(222, 222, 222)\", // The grey out node color\nhighlight: \"#f2ad4e\", // The highlighted node color\nparam: \"#666\", // The color when a node is part of a parameter highlight\nhover: \"rgb(30, 203, 208)\", // The hover over icon color\nbackColor: \"#333\", //The color of the optional back icon\ninteractionFront: true // The front icon is used for all interaction effects\n\nIf your font-family icons are made of multiple layers like the next-font, using the back and backColor allows you to further customize the appearance e.g.\n\n \n\nZoom To Fit\nThis property allows you to zoom out and center on the Topology so as much as possible of it is within view, without surpassing max/min zoom restrictions.\nYou might have a large Topology or one that expands past the screen width at the default zoom.\nvar TOPO_PROPS =  \nFor example in the bellow Topology, the nodes have random X & Y coordinates of 30, 60, -30 which is too spaced out for the default view to render within the screen at the default zoom. In the screenshots bellow, on the left you cannot see much, however setting zoomToFit: true you get the full picture as seen on the right.\n \n| Without ZoomToFit | With ZoomToFit |\n| ------------- |:-------------:|\n|  |   |\n \n \n Increased Text Size\nThere may be a situation that you wish to have an increased font-size rather than default.\nThe Topology Property nodeTextAdjust can take a Number value to increase or decrease the font. \nFor Example the following will increase the default font-size by 5. Note, the font will increase or decrease itself as the user interacts and zooms in or out of the Topology as well. \n\nvar TOPO_PROPS =  \n \n   \n| Without ZoomToFit | With ZoomToFit |\n| ------------- |:-------------:|\n|  |   |\n \n \n","id":30},{"path":"/guides/topology/boilerplate","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 5","title":"Boilerplate Contributions","content":"\nUsing Boilerplates\nBoilerplate is loaded in via the ui-config.js by simply specifying the Boilerplate(s) you wish to load and where you want to place them.\n\nThe Canvas Topology Framework provides predefined areas for contributions, that boilerplate modules or custom contributions can be placed, these are as follows:\n\ntoolbarOverlay - Used for any absolute positioned elements e.g. Popup menus, info boxes, dialogues.\n\ntoolbarLeft - Used for placing Widgets/Buttons into the top left of the Topology view.\n\ntoolbarRight - Used for placing Widgets/Buttons into the top right of the Topology view.\n\ntoolbarTools - Used for placing Widgets/Buttons/Workflows into the bottom of the Topology view.\n\ntoolbarRightSettings - An overlay that provides the subcategories Filter, View and Action for organizing of Contributions \nAvailable Boilerplates\n\nThe following Boilerplate Modules are available out of the box and can be optionally used within the Topology. A couple are tied to APIC-EM Topology and Inventory APIs, respectively needing the Topology to be populated with the associated API responses, these are marked as so by a †.\n\nAn example of the Info Box boilerplate being used can be seen bellow. We state that the Boilerplate Contribution is for the Topology Framework, we then specify the target as cisco.dna.example.topology which matches the id we set in the Topology Properties on Topology initialization. The Contribution \"InfoView\" is placed into the toolbarOverlay holder.\n\n\"cisco.dna.core.topology\": [\n     \n]\n\n Available Boilerplates\n\nInfo Box\nBoilerplate Value: InfoView\nInfo box offers a default click event popup for Nodes, Links and Multiple Node selection.\n    \nAlthough tailored for the default properties supplied by the APIC-EM physical-topolgy response, it offers a good starting point if you wish to develop your own Topology info popups for click events.\n\n Layers †\nBoilerplate Value: Layers\nAllows for the toggling of layers within the Topology view. This will grey out any node which is not part of the selected Layer 2, Layer 3, or VRF user choice.\n\nTags †\nBoilerplate Value: Tags\nAllows for the toggling of any tags applied to devices via the Device Inventory API. When a tag is selected, devices with the tag applied will have colorized circles rendered around them.\n\n Color Coding\nBoilerplate Value: ColorCoding\nA simple module that allows you to toggle on and off the applied color coding of nodes. \n\nLinks Toggle\nBoilerplate Value: LinkToggle\nThis allows the user to switch on and off the rendering of links between nodes.\n\n Hosts Toggle\nBoilerplate Value: HostToggle\nThis allows the user to switch on and off the rendering of devices with the familyType property Host between nodes. This helps de-noise your Topology and keep the rendered view optionally simpler at the users discretion.\n\nCenter View\nBoilerplate Value: CenterView\nClicking this will reposition the Topology camera view to center.\n\n Rotate Layout\nBoilerplate Value: RotateView\nClicking this will reposition the entire Topology by 90°.\n\nAggregation\nBoilerplate Value: AggregationToggle\n\n Multiselect\nBoilerplate Value: MultiselectToggle\n\nCapture Full Topology\nBoilerplate Value: FullScreenshot\n\n Capture Current Topology View\nBoilerplate Value: ViewScreenshot\n\nDetails\nBoilerplate Value: DetailsToggle\n\n Search\nBoilerplate Value: Search\n\nCurved Links\nBoilerplate Value: CurvedLinksToggle\n\n Zoom\nBoilerplate Value: ZoomTools\n\nArrange\nBoilerplate Value: Arrange","id":31},{"path":"/guides/topology/boilerplateLayouts","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 6","title":"Boilerplate Layouts","content":"\nBoilerplate Layout Algorithms allow you to easily handle Physical Topology positioning without worrying about the structuring.\n\nThere are multiple default layout algorithms provided that can be easily included in your Topology. Layout algorithms within the Topology Framework are ran as individual web workers, meaning computation time is off loaded from the main thread, allowing for non blocking and faster processing.\n\nYou can define multiple Boilerplate algorithms and set one as the default, or pass through just one which will automatically be used as default. If you use the Arrange Boilerplate module listed in the previous Boilerplate section, the user can then toggle between all layouts provided.\nThe Boilerplate Layouts are defined for usage through the ui-config.js contribution list as follows.\n\n\"cisco.dna.core.topology\": [\n     ,\n     ,\n     \n]\n\n| Enterprise Collapsed Layout | Enterprise Expanded Layout |\n| ------------- |:-------------:|\n|  |  |\n\n| Spiral Layout | Connections Layout |\n| ------------- |:-------------:|\n|  |  |\n \n\n \nThe Boilerplate layouts, excluding LayoutConnections, require that each node has a family and role type value, for example role: \"BORDER ROUTER\", family: \"Routers\".\n \nThe default role list used by pre-existing layout algorithms matches that of the APIC-EM physical-topology response:\nvar ROLES = [\n  \"cloud node\",\n  \"BORDER ROUTER\",\n  \"CORE\",\n  \"DISTRIBUTION\",\n  \"ACCESS\",\n  \"HOST\",\n  \"UNKNOWN\"\n];\n \nThe default role list used by pre-existing layout algorithms matches that of the APIC-EM physical-topology response:\nvar FAMILY = [\n  \"cloud node\",\n  \"Routers\",\n  \"Wireless Controller\",\n  \"Switches and Hubs\",\n  \"Cisco Interfaces and Modules\",\n  \"Cisco UCS Series\",\n  \"Unified AP\",\n  \"Autonomous AP\",\n  \"Security and VPN\",\n  \"Unsupported Cisco Device\",\n  \"Third Party Device\",\n  \"WIRED\",\n  \"WIRELESS\",\n  \"PHONE\",\n  \"UNKNOWN\",\n  \"Unauthorized Device\"\n];\n \nWith each node having one of the above values set, the Boilerplatee layout algorithms should work out of the box.","id":32},{"path":"/guides/topology/boilerplateLinks","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 6.5","title":"Boilerplate Links","content":"\nDifferent Topologies require different styles of links. \n\n| physical-hierarchy | logical-path|\n| ------------- |:-------------:|\n|  |  |\n \n Similarly to all Boilerplates, custom Links contribution modules can be used, or out of the box default styling is available.\n\n The currently available Link styling Boilerplates can be easily loaded in as a contribution, with your Topology ID as the target via the ui-config.js as so:\n\n \n\n \n\nif no Boilerplate or custom module is provided, the Topology will use its own default styling.","id":33},{"path":"/guides/topology/contributions","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 6","title":"Custom Contribution Widgets","content":"\nThe existing boilerplate modules is a good place to start when looking for how a Topology module is written.\n \nEvery module is passed the Topology Util and Aspect objects on load. They also receive a settings object as their third argument, which is usually properties defined on load from the properties TopologyModules list.\n \nA simple example is the Color Coding Boilerplate module.\n\ndefine([], function()  \n       ,\n      active: _enabled\n     ;\n \n    return  ;\n \n   ;\n \n );\n`","id":34},{"path":"/guides/topology/examples","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 9","title":"Example Source","content":"\nLogical Flow\n\nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\n\nexport default () =  ,\n          \"bars\":  ,\n          \"Switch\":  ,\n          \"sensor\":  ,\n          \"wlc\":  ,\n          \"router\":  ,\n          \"jabber\":  \n         ,\n        style:  ,\n        disableZoom: true,\n        disableNodeDrag: true,\n        disableCanvasDragV: true\n       \n        \n      var TOPO_DATA =  \n              ]\n               , family: \"phone\", myInfo: \"4% OK\" ,\n           \n              ]\n               , family: \"bars\", myInfo: \"55% OK\" ,\n           , family: \"wlc\", myInfo: \"10% OK\" ,\n           , family: \"Switch\", myInfo: \"33% OK\" ,\n           , family: \"sensor\", myInfo: \"14% OK\" ,\n           , family: \"sensor\", myInfo: \"78% OK\" ,\n           ,\n                   \n              ]\n               , family: \"router\", myInfo: \"44% OK\" ,\n           , family: \"jabber\", myInfo: \"72% OK\" \n          ],\n\n          links: [\n             ,\n             ,\n             ,\n             ,\n             ,\n             ,\n             ,\n             \n          ]\n         \n       ;\n      \n      \n      var mainTopology = new Topology();\n      mainTopology.init(TOPOPROPS, TOPODATA);\n      \n      mainTopology.util.isReady().then(function(response)  \n          else  \n         );\n\n        mainTopology.aspect.after(\"onNodesSelect\", function(nodeId, tileCoords, mouseCoords)  \n         );\n\n       );\n\n     \n  );\n\n  return  )  ,\n    dispose()  \n   ;\n\n \n`","id":35},{"path":"/guides/topology/faq","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 12","title":"FAQ","content":"\nWhat Framework does the Topology use?\nThe Topology is built on a contribution model developed for the DNA UI Platform. The Canvas rendering engine is built on top of JsISO, a tile engine optimized for various scales of data.\n\n Can I use the Canvas Topology Framework with any DNA UI Plugin Framework?\nYes, as the Topology Tool is pulled in from the Platform Service Registry there is no requirement on how you use it. Just require and pass it a DOM element.","id":36},{"path":"/guides/topology/gifs","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 10","title":"Example GIFs","content":"\n\nInstant Search\nPerformance is achieved using the Levenshtein distance algorithm within a Web Workers to keep responsiveness high, even when scaled.\n\n Path Trace \n\nThe ability for a Contribution using exposed Synthetic events and properties to render a path between a source and target populated via its own UX.\n\nCombining the search Boilerplate flow with the Pathtrace contribution to perform a work flow.\n\nLayers & Topology within Topology\n\nBoilerplate that provides the ability to gray out non L2/L3/VRF devices. A second Boilerplate allows for easily creating an overlay Topology via a simple property filtering.\n\n Multiselect\n\nSelecting multiple devices and hosts can be done via either cntrl + clicking one by one, or using the Multiselect Boilerplate and dragging a selection area over desired devices.\n\nLayout Change\n\nThe Layout Contributions run their Algorithms from within Web Workers, allowing for non-blocking logic to run and handle scaled data without a UX performance hit.\n\n Custom Layouts and Aggregation\n\nAggregate and move devices freely, with the ability to save and load custom user defined layouts.\n\nCollapse & Expand\n\nWith the optional Boilerplate, users can easily expand or collapse nodes using the defined Topology hierarchy, all executing exposed Topology Framework synthetic events.\n\n Position and Save Freely\n\nAggregate devices by dragging and dropping them on one another, apply custom labels and use the Topology APIs to store the defined layout.\n\nHighlight Tags and Overlay or Aggregate\n\nView devices with a particular tag, aggregate them or view them separately in a Topology Overlay.\n\n","id":37},{"path":"/guides/topology/icons","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 8","title":"Custom Contribution Icons","content":"\nThe Canvas Topology Framework out of the box offers a default set of icons and styles for Device & Host Family associated rendering. At build time this can be easily replaced or expanded on. However there may be a case were Plugin Contributions wish to expand on the existing Family associated rendering.\n\nAn example use case of this is a package that adds support for third party devices meaning their Family value is no longer returned by both the Inventory and Topology services as unknown. Although the backend will then provide a known Family type, there is a requirement to have the Topology  render appropriately and not show an Unknown Icon.\n\nThis is achieved with an Icon Contribution.\n\nIcon Contributions can add support, change the build time default, or further expand on properties giving more specific Icon displays. It consists of a ui-config.js that contains \n\nAn Icon and properties for the rendering reflect the same set as those offered at build time. The Topology has a few default fonts built-in, however an Icon Contribution can provide its own as well, in the bellow example bringing in font-awesome.\n\ncontributions:  \n  ]\n \n\nThis icon contribution targets the Topology with the ID cisco.dna.core.exampleTopology, providing the defined properties for any device with the Family value \"Jumper Switches\".\n\nAs seen in the bellow screenshot the Icon propagates throughout the full Topology.\n\n","id":38},{"path":"/guides/topology/","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 1","title":"Overview","content":"\nOverview\n\nThe Canvas Topology Framework is a flexible and easily extendable approach for rendering Physical and Logical views. The Framework is a core part of the Platform, using the Platform Contribution Model, and can be included anywhere with a few lines of code.\n\nThe core of the Framework is built on an aspect orientated approach, with the core functionality using the same hooks which are exposed for external developers and their contributions to consume.\n\nIt uses the HTML5 Canvas element and is built for both speed of loading and speed of rendering. As it is raster and not vector or DOM based, there is a lot of custom logic running in the background to track views, key items, cache graphics and interactive positioning.\n\nThe Framework is easily integrated into your page via the Service Registry as it is provided by the Platform as a Core Plugin.\n\n Custom Contributions\n\nAs mentioned Canvas Topology Framework allows for contributions via the Platform Contribution Model. The following list of Contributions are supported.\n\nWidgets and Workflows\n\n    All interactions within the Topology Framework trigger Synthetic Events. These Events can be hooked into or triggered via the provided util and aspect tools, inherited by default in every Topology Contribution.\n\n    This allows for optional Widgets and Workflows to be provided from external sources at runtime, applying their own custom interactions as well as look and feel. Optional Boilerplate Contributions are available for standard workflows, however these can be used at developers discretion or completely replaced if a different approach or UX flow is desired.\n\n Layout Algorithms\n\n    The Topology uses Web Workers for a variety of purposes to keep scaled Physical Topology data handling as fast as possible.\n\n    One area which the Canvas Topology Framework gains a lot of performance improvement from is offloading the positioning of Topology layouts to Layout Algorithm Web Workers. The Layout Algorithms are responsible for carrying out positioning of the data by their own means, and ensuring every node within the data is given an X and Y coordinate position. These coordinate populated nodes are then sent back to the Topology Framework for rendering.\n\n    A Layout Algorithm Contribution allows developers to write their own layout logic, producing the desired structuring they want to offer.\n\nLink Path Style\n\n    Different Topology views require different default link styling. One Topology use case for a Logical layout may desire all links to be straight and direct between source and target, while a Physical layout may need curved links within the hierarchy placement.\n\n    The Topology Framework allows for a Links contribution that describes how links should look depending on where the target node sits versus the source node in the visual topology grid. Currently a link can be given a starting and ending offset, as well as two X and Y Bezier curve control points depending on 4 possible directions.\n\n Device Rendering Support\n\n    The Topology Framework by default supports various Family and Role types, rendering the specified icon, color and various other properties chosen at build time. These can be easily replaced or adjusted as desired allowing for a custom appearance and ability to match UX needs.\n\n    Via an Icon Contribution developers can further expand on the supported Family and Role types at runtime. Should a Plugin to the platform expand on supported physical devices or a developer wants to alter the appearance of a specific device based on a new property, an Icon Contribution can alter the rendering properties as well as providing its own font library to use.\n\nTopology Performance\nThe key elements of keeping the Topology fast are but not limited too the following.\n\nAs it uses Canvas and not SVG, the rendering area can be controlled and only visible nodes drawn. Canvas can handle drawing many items far better than SVG, remaining at 60 Frames Per Second. Methods are incorporated to only render nodes which would be visible in the users view port.\n\nA redraw of the Canvas Context only occurs when an interaction is made, otherwise it remains as a static image. This allows for multiple Topologies per page without any impact to rendering.\n\nSVG Icons via Font Icon packs (NeXt & Prime Fonts or Contributed Fonts) are converted to PNG offscreen and then cached when a specific request is made for one. The cached PNG version is then used on every other draw request. This keeps the sharp Vector quality without the increased cost of Vector rendering.\n\nLinks between nodes are drawn as a single polygon, keeping individual draw requests limited were possible.\n\nA lot of the logic is highly optimized e.g. loops, maths etc.\n\nWebWorkers are used for layout algorithms and Levenshtein distance search.","id":39},{"path":"/guides/topology/initializing","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 2","title":"Initializing Basics","content":"\nAdding a Topology to your page\nA Topology is easily created by getting the Canvas Topology Framework from the Service Registry.\n \nA Topology requires two things, a data set to work from which contains the items within your Topology, and initializing properties that describe how your Topology will look.\n \nThe bellow basic example shows getting the Canvas Topology Framework from the Service Registry. We then create a a div and set it to be the DOM element we apply our Topology to via TOPOPROS.applyTo. TOPODATA contains a nodes list, where each item contains the minimum requirement of an ID and a label.\n\nNote that the structuring bellow follows the Platform Contribution Model, however you can use the Topology however is needed, as long as you pass through the DOM element you intend to use.\n\nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\nexport default () =  ;\n\n      const TOPO_DATA =  \n          ]\n         \n       ;\n\n      var mainTopology = new Topology();\n      mainTopology.init(TOPOPROPS, TOPODATA);\n\n     \n  );\n\n  return  )  ,\n    dispose()  \n   ;\n \n\nThis will render the most simple of Topologies, a single device that can be dragged, and an interactive experience that only offers the ability to pan and zoom the view camera.\n\n \n\n Adding further Topology nodes\nThe Canvas Topology Framework will accept any number of nodes passed to it from the TOPO_DATA.response.nodes list for rendering. Each node can have any desired attributes that can then be consumed later from within the Topology when extending it via your own contributions or interactions, however there are some reserved property keys that the Topology makes use of. To add a second device we simply add it into the response.nodes list and give it a unique ID:\n\nvar TOPO_DATA =  ,\n       \n    ]\n   \n ;\n \nOn reload you will now see there are now two devices automatically aggregated together. Note the reason they are UNKNOWN is because we haven't added some Family/Icon defining properties to the individual nodes as of yet, however this is covered in a later section:\n \n\n \nThe reason for them being aggregated together automatically is due to both of them sharing no coordinates. We can easily adjust the positions of these devices by giving them different X & Y coordinates so they are separated. This is done by giving each node a customParam.x and customParam.y like so:\n \nvar TOPO_DATA =   ,\n        \n    ]\n   \n ;\n\nAdding links between nodes\nThe second most important feature in the rendering of the Topology is links. With out devices present we can add a link between them. We can render a link between these devices by simply adding a new links list to the TOPO_DATA.response object, giving the source and target as the node ids:\n\nvar TOPO_DATA =   ,\n        \n    ],\n    links: [\n       \n    ]\n   \n ;\n\nSimilarly to nodes, each link can have an ID and custom properties that can be accessed at a later time. For instance if you wanted a link to have the status: \"up\", you can simply add this, and in later interactions this value will be accessible when the link is selected or accessed.\n \n Multiple Topologies\nYou can have as many Topologies rendered as desired on a single page with variating data, style, contributions and events.\nThere is currently no sharing of resources between Multi-Topology pages and each Topology will run and act as if it was a single entity. In order for this to work, you must make sure the Topology Data passed in to the Topology Framework is a unique instance of the object. You can see in the bellow example we use a quick JSON.stringify and JSON.parse workaround to deepcopy the data. Also note, we add a unique id value to each topology.\n\nOne of the impacting benefits of the Canvas Topology Framework, is as the name states it's built with Canvas. This means that having multiple topologies creates no additional cost as there is no DOM polluting for each node, link, label and so on. No background processing occurs while the Topology is not being interacted with.\n\nLocal testing has been performed with over one hundred topologies being rendered on the same page. Do note, if you're dealing with large volumes of data there may be restrictions needed.\n\nBellow is an example of four topologies rendered on the same page.\n\nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\n\nexport default () =  \n       ;\n      \n      const TOPO_PROPS2 =  \n       ;\n     \n      const TOPO_PROPS3 =  \n       ;\n     \n      const TOPO_PROPS4 =  \n       ;\n\n      const TOPO_DATA =   ,\n              \n          ],\n          links: [\n             ,\n          ]\n         \n       ;\n\n      var mainTopology1 = new Topology();\n      mainTopology1.init(TOPOPROPS1, JSON.parse(JSON.stringify(TOPODATA)));\n     \n      var mainTopology2 = new Topology();\n      mainTopology2.init(TOPOPROPS2, JSON.parse(JSON.stringify(TOPODATA)));\n     \n      var mainTopology3 = new Topology();\n      mainTopology3.init(TOPOPROPS3, JSON.parse(JSON.stringify(TOPODATA)));\n     \n      var mainTopology4 = new Topology();\n      mainTopology4.init(TOPOPROPS4, JSON.parse(JSON.stringify(TOPODATA)));\n\n     \n  );\n\n  return  )  ,\n    dispose()  \n   ;\n\n \n`","id":40},{"path":"/guides/topology/interaction","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 3","title":"User Interaction","content":"\nThe Topology is built on aspect orientated functionality, nearly all events within the Topology Framework tigger synthetic events. This allows developers to hook into user interactions and trigger their own UX within a decoupled approach.\n \nThe Topology provides a util which contains an isReady Promise - mainTopology.util.isReady(). This promise will resolve once the Topology has rendered, loaded all plugins and is ready to allow for further extending.\nThe Topology also provides an aspect tool which is used for triggering custom events after a util function is triggered.\n \nCreating an event on Node Select\nContinuing from our previous example we can hook into the users interactions by applying events after the Topology is ready. For example we can create a simple alert when a device is clicked by doing the following:\n \nimport serviceRegistry from \"external/core/utils/serviceRegistry\";\n\nexport default () =   ,\n              \n          ],\n          links: [\n             \n          ]\n         \n       ;\n      \n      var TOPO_PROPS =  ;\n    \n      var mainTopology = new Topology();\n      mainTopology.init(TOPOPROPS, TOPODATA);\n     \n      mainTopology.util.isReady().then(function(response)  \n         );\n      \n       );\n     \n\n  );\n\n  return  )  ,\n    dispose()  \n   ;\n\n \n\nWhen you select a node you will then see something along the lines of:\n \n \n\n \n \nThis gives the developer the ability to integrate their own flows with the Topology without needing to know the ins-and-outs of how the Framework functions. A developer can listen for an interaction and present whatever data they choose in whichever manor they see fit.\n \nA break down of the additional code to this section can be seen bellow\n\nmainTopology.init(TOPOPROPS, TOPODATA);\n \n// Await for the Topology to complete loading before attempting to extend, note that is a Promise which will resolve upon completion.\n// You can have multiple isReady statements as they'll be stored to a list until ready to resolve by the Framework.\nmainTopology.util.isReady().then(function(response)  \n  \n   );\n  \n );\n\n Interaction Configurable Properties\n\nIn various Topologies and use cases, there may be different needs calling for disabling certain user interaction events.\nThe current list of optional interaction properties within the Topology are as follows bellow. These properties are all false by \ndefault. In order to set them pass them as a value within your TOPO_PROPs object.\n\ndisableZoom: true, // Prevent zoom from occurring within the Topology. Allows you to keep at a set scale.\ndisableNodeDrag: true, // Prevent nodes from being dragged by the user so reposition is not possible.\ndisableCanvasDragH: true, // Prevent the Topology View from moving on the horizontal axis.\ndisableCanvasDragH: true, // Prevent the Topology View from moving on the vertical axis.\n`","id":41},{"path":"/guides/topology/layouts","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 7","title":"Custom Contribution Layouts","content":"\nThe Basics\n\nA layout algorithm is a web worker for calculating the positions of each node in your desired structure. It allows your complex logic for positioning each node to be ran without blocking the main thread, which will be executed while other Topology loading tasks are performed. Layout algorithms are optional, but do greatly improve your loading speed if dealing with high volumes of data.\n\nThe web worker is passed the nodes data, the links data and the defined or default hierarchy structuring. The web worker in return, after executing its layout logic, will return the nodes data, with every node now having a set repositionX and repositionY value. How you generate the coorinates is down to you or the third party layout algorithms logic.\n \nAll layout algorithms require some initializing properties that describe what the algorithm does and it's title.\n\nvar _properties =  \n  ]\n ;\n \nThe Following example shows the basic properties of a simple layout algorithm.\n\nAs stated only requirement of a layout algorithm is that it provides a repositionX and repositionY value for every node within the node list.\n\nThe example does things in a certain manor, however as the developer you can write logic in any preferred form. As long as the web worker performs an \"organise\" postMessage back to the main thread on positioning completion.\n \n\nvar _properties =  \n  ]\n ;\n\nvar _nodesData = { ; // Hashtable of Nodes where ID is key\nvar _nodesDict = []; // List of Node IDS\n\n// Init recieves the Topology data and will perform any one time algorithm logic e.g. calculating branches\nfunction _init(nodesData, linksData, hierarchy)  \n \n\n// Reposition is performed when the algorithm is to execute\nfunction _reposition(sortType, disaggregate)  \n\n  self.postMessage(JSON.stringify( ));\n \n\nself.addEventListener('message', function(e)  \n\n  if (data.perform === \"reposition\")  \n\n  if (data.perform === \"readyCheck\")  ));\n   \n\n , false);\n\n Third Party\n\nLayout Algorithms have only the browser defined limitation of web workers where they are unable to access the document. Aside from this there is a lot of freedom on what can be done and what is supported.\n\nDevelopers, if they choose can use open sourced graphing libraries to help reach how they get to their defining repositionX and repositionY coordinates.\n\nThe bellow example, similar to the above example, creates a layout, however it uses the open source graphing engine Cytoscape to achieve this. You can see we import cytoscape from cytoscape.js which is local to the Layout Contribution. This can obviously be massaged further and have structuring applied by executing the capabilities of Cytoscape.\n\nimport cytoscape from \"~/cytoscape.js\";\n\nvar _properties =  \n  ]\n ;\n\nvar _nodesData = { ; // Hashtable of Nodes where ID is key\nvar _cy;\n\nfunction _init(nodesData, linksData, hierarchy)  ;\n\n  for (var k in nodesData)  \n     );\n   \n\n  var i = linksData.length;\n  while (i--)  \n    );\n   \n\n  _cy = cytoscape( \n   );\n \n\nfunction _reposition(sortType, disaggregate)  \n  self.postMessage(JSON.stringify( ));\n \n\nself.addEventListener('message', function(e)  \n  if (data.perform === \"reposition\")  \n  if (data.perform === \"readyCheck\")  ));\n   \n , false);\n`","id":42},{"path":"/guides/topology/links","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 7.5","title":"Custom Contribution Links","content":"\nCustom Links Style Overview\n\nA link contribution can be loaded in via the ui-config.js. The extension point in this case is \"links\".\n\nA custom Link contribution describes the basic appearance of a link in the Topology view. \n\nCurrently this works as a directional system, rendering links in a specific way depending on where the target node sits from the beginning source node. These directions are above, bellow, left (inline), right (inline). A default is also available which is used for when a Node is being dragged by the user.\n\nEach directional property supports an x1 and y1, which describes any initial offset from the center of the node. This allows for links to travel in a direction before heading in the direction of the target.\n\nEach direction property supports a cp1x, cp1y, cp2x and cp2y, which are the control points for your Bezier curve. For more information on Bezier curve control points see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo. These values are relative to the starting position and optionally set x1 and y1 offsets. \n\nLastly each direction property supports an x2 and y2 value, which control any offset before the centre of the ending target node. Again this is relative.\n\nLastly a links contribution can provide settings for how the link should end at both the source and target. Right now only a circular shape and color is supported. Note, this requires use of the x1,y1 and x2,y2 properties as this will be where the ending image is rendered.\n\nThe best way to get the exact look and feel you're after is to load an existing link contribution source, and play with the numbers until the Bezier control points make sense.\n\nIn the future further shapes, or ability to contribute shapes will be supported, as well as endless control points. \n\n Example Link Contribution\n\nThe bellow example source would render links as the following image displays to a tagret topology with the match id \"cisco.dna.myExampleTopology\".\n\n \n\nexport const style =  ,\n    left:  ,\n    right:  ,\n    above:  ,\n    below:  \n   ,\n  linkEnds:  ,\n    target:  \n   \n ;\n`","id":43},{"path":"/guides/topology/synthetics","date":"2017-03-02T09:00:00","menu":"menu:","  main":" main:","    parent":"   parent: topology-framework","    weight":"   weight: 11","title":"Available Synthetic Events","content":"\nThis is the current list of Synthetic events offered and consumed and in Topology Framework. Note these are all intended for developer/contribution consumption. There are more which are used by the Topology Framework for internal purposes.\nIf you would like a synthetic event provided to allow you to perform an interaction that can't be achieved with the current offered, please do reach out.\n\nonTopologyReload: function()  ,\n \nonClick: function()  ,\n \nonCurrentNodeInView: function(node)  ,\n \nonUpdateNode: function(node)   ,\n \nonSetZoom: function(zoom)  ,\n \nonNodesSelect: function(nodes)  ,\n \nonNodeHover: function(node)  ,\n \nonLinkSelect: function(link)  ,\n \nonLinkedNodes: function(nodeList)  ,\n \nonHighlightPath: function(method, details)  ,\n \nshowFullTopoView: function()  ,\n \nonHighlightNodes: function(nodeList)  ,\n \nonInstantRepositionUpdate: function(nodeList)  ,\n \nonLocationChange: function(locationId)  ,\n \nonUpdateTags: function()  ,\n \nonTagsUpdate: function()  ,\n \nonDeviceRoleChange: function()  ,\n \nonDisaggregateNode: function()  ,\n \nonDisaggregateAll: function(id)  ,\n \nonFocusCoordinates: function (x, y)  ,\n \nonLinkToggle: function(status)  ,\n \nonCurveLinkLevel: function(level)  ,\n \nonDeviceDetailToggle: function(status)  ,\n \nonHostToggle: function(status)  ,\n \nonColorCodeToggle: function(status)  ,\n \nonTagsToggle: function(tags)  ,\n \nonPolicyTagsToggle: function(tags)  ,\n \nonLayerToggle: function(layer, layerName)  ,\n \nonSetTopologyData: function(data)  ,\n \nonZoomIn: function()  ,\n \nonZoomOut: function()  ,\n \nonSelectNodeById: function(id)  ,\n \nonCenterView: function()  ,\n \nonRotateView: function()  ,\n \nonResizeTopologyWidth: function(width)  ,\n \nonResizeTopologyHeight: function(height)  ,\n \nonOverlayByProperty: function(property, by, values)  ,\n \nonSetLocationID: function(id)  ,\n \nonSetNodesData: function(nodesData)  ,\n \nonSetCustomProperties: function(customProps)  ,\n \nonSetLinksData: function(linksData)  ,\n \nonSetLinkDashed: function(id, dashed)  ,\n \nonSetLinkThickness: function(id, thickness)  ,\n \nonSetLinkColor: function(id, color)  ,\n \nonSetNodeColor: function(id, color)  ,\n \nonSetNodeIcon: function(id, fontFamily, unicode)  ,\nonSetNodeBadge: function(id, badgeProperties)  \n`","id":44},{"path":"/guides/view-frameworks/backbone-marionette","date":"2017-03-03T11:40:25-08:00","title":"Backbone/Marionette","menu":"menu:","  main":" main:","    parent":"   parent: \"view-frameworks\"","    weight":"   weight: 2","content":"\nOverview\nThe platform provides a utility function, genericViewFromBackboneView, to simplify contribution of views ([shell routes] (  ), for example) that are implemented using Backbone/Marionette.\n\nIt wraps such views with an implementation of the [generic view interface] (  ).\n\nExample\nimport genericViewFromBackboneView from \"external/core/utils/genericViewFromBackboneView\"\n\nconst MyView = Backbone.View.Extend( )\n\nexport default genericViewFromBackboneView(MyView)\n\nA template string can be passed in as an option to genericViewFromBackboneView.  This template will be rendered into the DOM prior to rendering the view:\n\nimport MyTemplate from \"raw-loader!./MyTemplate.html\"\n\nexport default genericViewFromBackboneView(MyView,  )\n\nNote that Marionette views require a template property to be set in the view itself.  If there is no associated template, set the value to _.noop.\n","id":45},{"path":"/guides/view-frameworks/overview","date":"2017-03-03T11:40:25-08:00","title":"View Framework Overview","menu":"menu:","  main":" main:","    parent":"   parent: \"view-frameworks\"","    weight":"   weight: 1","content":"\nThe platform doesn’t care how your plugin renders views, so long as it can return a DOM node when asked. More discussion on this here.\n","id":46},{"path":"/guides/view-frameworks/react","date":"2017-03-03T11:40:25-08:00","title":"React","menu":"menu:","  main":" main:","    parent":"   parent: \"view-frameworks\"","    weight":"   weight: 3","content":"\nFor React users, a utility library, @cisco-dna/react-utils, is provided to easily adapt React components to platform generic views, and vice-versa.\n\nExample\nLook here for a working example that illustrates how to contribute React based views.\n\n React components\nAlso provided out of the box is a set of React components that can be used within plugins.\n\nTo use them via a DPM based plugin, make sure that your dpm.config.js looks like this:\n\ndpm.config.js\nmodule.exports =  \n\nComponent documentation can be found here.\n\n**Note that the documentation is currently somewhat out of date:\n* components should be imported from @cisco-dna/react-components rather than mashup.  Example:*\n\nimport   from \"@cisco-dna/react-components\"\n\n","id":47},{"path":"/guides/webcomponents/area","date":"2017-03-03T11:40:25-08:00","title":"Area","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 70","content":"\nDescription\n\nAn area chart up to 10 lines per chart.  Top/bottom dashed line can be added to define the threshold. \n\n Demo 1 Assurance Area Chart - Tooltip\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/area1.js\"/script\n\nProperties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data |\n| names | array | Array containing title/names for each line |\n| topValue | number | red dashed line pointing the top threshold  |\n| bottomValue | number | gray dashed line pointing the bottom threshold |\n| topname | string | Name assigned to topValue |\n| bottomname | string | Name assigned to bottomValue |\n| area | boolean | Convert line to area chart |\n| width | string | Width of the chart.It defaults to 100% |\n| height | string | Height of the chart.It defaults to 300px |\n| xtitle | string | Title of the x axis.It defaults to empty string |\n| ytitle | string | Title of the y axis.It defaults to empty string |\n| legends | boolean | Legends visibility |\n| exprt | boolean | Export chart option to JPG |\n\n Examples\nReact Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ,  ,  ,  ];\n\nconst names = [\"value1\", \"value2\", \"value3\"]\n\nclass TimelineSample extends React.Component  \n    render()  \n                    names= \n                    topValue= \n                    bottomValue= \n                    topname= \n                    bottomname= \n                    area= \n                    xtitle= \n                    ytitle= \n                /DnxTimelineT\n        );\n     \n \n\n jQuery Code\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ,  ,  ,  ,  ];\n\nconst names = [\"Label 1\", \"Label 2\", \"Label 3\"]\n\n    const chart = $(\"dnx-timeline-t-chart /\")\n    chart.prop( )\n    $(document.body).append(chart)\n )\n\n","id":48},{"path":"/guides/webcomponents/bar","date":"2017-03-03T11:40:25-08:00","title":"Bar","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 60","content":"\nDescription\n\nA bar chart up to 10 stacked columns per chart.  Top/bottom dashed line can be added to define thresholds. \n\n Demo 1 Assurance Bar Chart - Stacked Columns - Tooltip\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/bar1.js\"/script\n\nDemo 2 Assurance Bar Chart Rotated - Stacked Columns - Tooltip\n\ndiv id=\"react-app2\"/div\nscript src=\"js/libs/webcomponents/bar2.js\"/script\n\n Demo 3 Assurance Bar Chart Stacked and Top - Bottom variable thresholds \n\ndiv id=\"react-app3\"/div\nscript src=\"js/libs/webcomponents/bar3.js\"/script\n\nDemo 4 Assurance Bar Chart Regular \n\ndiv id=\"react-app4\"/div\nscript src=\"js/libs/webcomponents/bar4.js\"/script\n\n Properties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data |\n| names | array | Array containing title/names for each bar |\n| topValue | array | red dashed line values pointing the top threshold.  |\n| bottomValue | array | gray dashed values line pointing the bottom threshold |\n| topname | string | Name assigned to topValue |\n| bottomname | string | Name assigned to bottomValue |\n| rotate | boolean | Rotate chart from vertical bar to horizontal bars. |\n| stack | string | Type of stack. Possible values are \"regular\" and \"none\" |\n| xformat | string | Format of the x-value. Possible values are \"date\" and \"text\"  |\n| columnwidth | number | Width of columns. |\n| barcolor | array | Custom set of bar colors |\n| width | string | Width of the chart.It defaults to 100% |\n| height | string | Height of the chart.It defaults to 300px |\n| xtitle | string | Title of the x axis.It defaults to empty string |\n| ytitle | string | Title of the y axis.It defaults to empty string |\n| legends | boolean | Legends visibility |\n| exprt | boolean | Export chart option to JPG |\n\nExamples\n React Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ,  ,  ,  ];\n\nconst names = [\"value1\", \"value2\", \"value3\"]\n\nclass BarSample extends React.Component  \n                    topValue= \n                    bottomValue= \n                    topname= \n                    bottomname= \n                    names= \n                    rotate= \n                    stack= \n                    xformat= \n                    xtitle= \n                    ytitle= \n                /DnxBar\n        );\n     \n \n\njQuery Code\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ,  ,  ,  ,  ];\n\nconst names = [\"Label 1\", \"Label 2\", \"Label 3\"]\n\n    const chart = $(\"dnx-bar-chart /\")\n    chart.prop( )\n    \n    $(document.body).append(chart)\n\n )\n\n","id":49},{"path":"/guides/webcomponents/bubble","date":"2017-03-03T11:40:25-08:00","title":"Bubble","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 90","content":"\nDescription\n\nBubble chart. Users can enter up to 4 different variables to represent a point: x position, y position, size and color using the data object.\n\n Demo 1 Assurance Bubble Tooltip\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/bubble.js\"/script\n\nProperties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data |\n| names | array | Array containing title/names for each line |\n| width | string | Width of the chart.It defaults to 100% |\n| height | string | Height of the chart.It defaults to 300px |\n| xformat | string | Format of the x-value. Possible values are \"date\" and \"text\"  |\n| columnwidth | number | Width of columns. |\n| xtitle | string | Title of the x axis.It defaults to empty string |\n| ytitle | string | Title of the y axis.It defaults to empty string |\n| legends | boolean | Legends visibility |\n| exprt | boolean | Export chart option to JPG |\n\n Examples\nReact Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ];\n\nconst names = [\"10 Attempts\", \"20 Attempts\", \"30 Attempts\"]\n\nclass BubbleSample extends React.Component  \n                    names= \n                    xformat= \n                    xtitle= \n                    ytitle= \n                /DnxBubble\n        );\n     \n \n\n jQuery Code\n\nconst dataBubble = [ ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ];\n\nconst namesBubble = [\"10 Attempts\",\"20 Attempts\",\"30 Attempts\"]\n\nconst chartBubble = $(\"dnx-bubble-chart /\")\n    chartBubble.prop( )\n    $(document.body).append(chartBubble)\n\n","id":50},{"path":"/guides/webcomponents/hbar","date":"2017-03-03T11:40:25-08:00","title":"HBar","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 80","content":"\nDescription\n\nHorizontal bar with labels and no axis . \n\n Demo 1 Assurance Horizontal Bar Chart - Tooltip\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/hbar.js\"/script\n\nProperties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data |\n| names | array | Array containing title/names for each line |\n| xformat | string | Format of the x-value. Possible values are \"date\" and \"text\"  |\n| columnwidth | number | Width of columns. |\n| width | string | Width of the chart.It defaults to 100% |\n| height | string | Height of the chart.It defaults to 300px |\n\n Examples\nReact Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ];\n\nconst names = [\"Label 1\"]\n\nclass HBarSample extends React.Component  \n                    names= \n                    xformat= \n                /DnxBar\n        );\n     \n \n\n jQuery Code\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ,  ];\n\nconst names = [\"Label 1\"]\n    const chart = $(\"dnx-hbar-chart /\")\n    chart.prop( )\n    $(document.body).append(chart)\n )\n\n","id":51},{"path":"/guides/webcomponents/home","date":"2017-03-03T11:40:25-08:00","title":"Why Web Components?","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 10","content":"\nDNA Web Components\n\nDNA Web Components allow you to have a single implementation of DNA widgets - no need for separate JQuery, React, Angular, etc implementations. It is based on web standards providing a modular approach for web development.\n\nUse from anywhere - they're just html tags / DOM elements. \n\n Example \n\n//* React *//\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ];\n\nclass DonutSample extends React.Component  \n            maintitle='Pie Chart Title'\n            labels= \n        /DnxDonut\n        <);\n     \n \nexport default DonutSample;\n\n//* JQuery *//\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ];\n\n    const internaltext=[ ]\n\n    function _onClickSlice(event)  \n    const chart = $(\"dnx-donut-chart /\")\n    chart.prop( )\n    $(document.body).append(chart)\n    $('dnx-donut-chart').on(\"onClickSlice\",  , function (event)  );\n )\n\nCurrent List \n\nWe update this list on regular basis as we move new components. Stay tuned!\n\n[Donuts] (/guides/webcomponents/pie)\n[Timeline Chart] (/guides/webcomponents/timeline)\n[Line Chart] (/guides/webcomponents/timeline)\n[Area Chart] (/guides/webcomponents/area)\n[Bar Chart] (/guides/webcomponents/bar)\n[Bar + Line Chart] (/guides/webcomponents/bar)\n\n Want to know more about web components?\n\nProjects\nhttps://github.com/skatejs/skatejs\nhttps://github.com/webcomponents/custom-elements\nhttps://github.com/webcomponents/react-integration\nhttps://github.com/WebComponents/webcomponentsjs\nhttps://www.polymer-project.org/\n\n Articles / Resources\nhttps://github.com/w3c/webcomponents\nhttps://developer.mozilla.org/en-US/docs/Web/Web_Components\nhttps://developer.mozilla.org/en-US/docs/Web/WebComponents/ShadowDOM\nhttps://blog.revillweb.com/open-vs-closed-shadow-dom-9f3d7427d1af\nhttps://jonrimmer.github.io/are-we-componentized-yet/\nhttps://css-tricks.com/modular-future-web-components/ (a bit out of date!)\n\nPropaganda\nhttps://www.slideshare.net/JohnRiv/web-components-the-future-of-web-development-is-here-75576668?qid=1158ec3b-54da-4ee7-b045-af758b3e8ca4&v=&b=&from_search=1\nhttps://hackernoon.com/why-im-moving-on-to-web-components-and-not-looking-back-aa8028c99c83","id":52},{"path":"/guides/webcomponents/line","date":"2017-03-03T11:40:25-08:00","title":"Line","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 50","content":"\nDescription\n\nA line chart up to 10 lines per chart.  Top/bottom dashed line can be added to define thresholds.\n\n Demo 1 Assurance Line Chart - Tooltip\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/line1.js\"/script\n\nDemo 2 Assurance Line Chart Top - Bottom Thresholds\n\ndiv id=\"react-app2\"/div\nscript src=\"js/libs/webcomponents/line2.js\"/script\n\n Properties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data |\n| names | array | Array containing title/names for each line |\n| topValue | array | values representing top dashed line |\n| bottomValue | array | values representing bottom dashed threshold |\n| topname | string | Name assigned to topValue |\n| bottomname | string | Name assigned to bottomValue |\n| width | string | Width of the chart.It defaults to 100% |\n| height | string | Height of the chart.It defaults to 300px |\n| xtitle | string | Title of the x axis.It defaults to empty string |\n| ytitle | string | Title of the y axis.It defaults to empty string |\n| legends | boolean | Legends visibility |\n| exprt | boolean | Export chart option to JPG |\n| redzoneposition | string | If topvalue is defined, it describes the position of the red background (critic zone). Possible values are \"none\", \"top\", and \"bottom\"  |\n| barcolor | array | Custom set of line colors |\n\nExamples\n React Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ,  ,  ,  ];\n\nconst names = [\"value1\", \"value2\", \"value3\"]\n\nclass TimelineSample extends React.Component  \n    render()  \n                    names= \n                    topValue= \n                    bottomValue= \n                    topname= \n                    bottomname= \n                    xtitle= \n                    ytitle= \n                /DnxTimelineT\n        );\n     \n \n\njQuery Code\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ,  ,  ,  ,  ];\nconst names = [\"Label 1\", \"Label 2\", \"Label 3\"]\n\n    const chart = $(\"dnx-timeline-t-chart /\")\n    chart.prop( )\n    \n    $(document.body).append(chart)\n\n )\n\n","id":53},{"path":"/guides/webcomponents/pie","date":"2017-03-03T11:40:25-08:00","title":"Single/Double Donut","mylist":"[","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 30","content":"\nDescription\n\nSingle and Double Donut/Pie Charts allowing custom representation of the tooltip, call-outs and internal text/titles.\n\n Demo 1 Single Donut Call Outs\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/piechart1.js\"/script\n\nDemo 2 Single Donut Bottom Legend\n\ndiv id=\"react-app2\"/div\nscript src=\"js/libs/webcomponents/piechart2.js\"/script\n\n Demo 3 Single Donut Right Legend\n\ndiv id=\"react-app2r\"/div\nscript src=\"js/libs/webcomponents/piechart2r.js\"/script\n\nDemo 4 Double Donut - Click on Slice\n\ndiv id=\"react-app3\"/div\nscript src=\"js/libs/webcomponents/piechart3.js\"/script\n\n Properties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data with the respective categories and subcategories |\n| internaltext | object | Object repesenting the content to be displayed inside/outside the donut. Users can pass position, size, font-format (bold, color) and text |\n| legendposition | string | Position of the legend (bottom or right) |\n| labels | boolean | Labels (Call outs) of categories (true or false). If true, legends will be removed |\n| callouttext | string | String representing call-out format/content. Use [[property name]] to call values from data object. (See React/jQuery sample) |\n| tooltiptext | string | String represeting tooltip format/content. Use [[property name]] to call values from data object. (See React/jQuery sample) |\n| width | string | Width of the chart container. It defaults to 100% |\n| height | string | Height of the chart container. It defaults to 350px |\n| onClickSlice | function | Event to be dispatched when users click on any of the slides of the donut. Users can use this to extend the capabilities of the chart. |\n\nExamples\n React Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ]\n ,  ,  ,  ]\n ,  ];\n\nconst data2 = [ ,  ,  ,  ];\n\nconst internaltext=[ , ]\n\nclass DonutSample extends React.Component  \n    _onClickSlice(event)  \n    render()  \n            internaltext= \n            legendposition='bottom'\n            labels= \n            onClickSlice= \n            width='550px'\n            height='400px'\n            callouttext='[[title]]: [[value]]%'\n            tooltiptext='[[title]]: [[value]]%'\n        /DnxDonut\n\n        <DnxDoubleDonut data= \n            internaltext= \n            onClickSlice= \n            width='550px'\n            height='400px'\n            tooltiptext='[[title]]: [[value]]%'\n        /DnxDoubleDonut\n        /div);\n     \n \n\nexport default DonutSample;\n\njQuery Code\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ,  ]\n ,  ,  ,  ]\n ,  ];\n\nconst data2 = [ ,  ,  ,  ];\n\nconst internaltext=[ , ]\n    function _onClickSlice(event)  \n    const chart = $(\"dnx-donut-chart /\")\n    chart.prop( )\n    $(document.body).append(chart)\n    $('dnx-donut-chart').on(\"onClickSlice\",  , function (event)  );\n\n    const chartDouble = $(\"dnx-doubledonut-chart/\")\n    chartDouble.prop( )\n    $(document.body).append(chartDouble)\n    $('dnx-doubledonut-chart').on(\"onClickSlice\",  , function (event)  );\n )\n\n","id":54},{"path":"/guides/webcomponents/timeline","date":"2017-03-03T11:40:25-08:00","title":"Timeline","menu":"menu:","  main":" main:","    parent":"   parent: wc-all","    weight":"   weight: 40","content":"\nDescription\n\nA timeline chart. It can be collapsed to compact the line only in the X axis. Line color of the discrete intervals changes according to the next value scale definition:\n\n| Color | Interval |\n| :--- | :--- |\n| red | [0,3] |\n| yellow | (3,8) |\n| green | [8,10] |\n\n Demo 1 Assurance Timeline Tooltip\n\ndiv id=\"react-app1\"/div\nscript src=\"js/libs/webcomponents/timeline1.js\"/script\n\nDemo 2 Assurance Timeline collapsed view\n\ndiv id=\"react-app2\"/div\nscript src=\"js/libs/webcomponents/timeline2.js\"/script\n\n Properties\n\n| Name | Type | Description |\n| :--- | :--- | :---        |\n| data | object | Object containing the data |\n| collapsed | boolean | collapsed timeline view |\n\nExamples\n React Code\n\nimport React from 'react';\nimport   from 'external/@cisco-dna/dnx-react-components';\n\nconst data = [ ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ];\n\nclass TimelineSample extends React.Component  \n                    collapsed= \n                /DnxTimeline\n                <DnxTimeline\n                    data= \n                    collapsed= \n                /DnxTimeline\n            /div\n        );\n     \n \n\njQuery Code\n\ndefine(['external/@cisco-dna/dnx-web-components'],function()  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ];\n\n    const chart = $(\"dnx-timeline-chart /\")\n    chart.prop( )\n    const chart2 = $(\"dnx-timeline-chart /\")\n    chart2.prop( )\n    $(document.body).append(chart2)\n )\n\n","id":55},{"path":"/search","date":"2016-09-13T09:00:00+00:00","title":"Search","type":"\"page\"","layout":"\"search\"","content":"\n\n","id":56}]